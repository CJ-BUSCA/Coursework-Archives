From: <Saved by Blink>
Snapshot-Content-Location: https://en.m.wikipedia.org/wiki/Generator_(computer_programming)
Subject: Generator (computer programming) - Wikipedia
Date: Fri, 1 Oct 2021 17:06:08 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----"


------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: text/html
Content-ID: <frame-022DF80869D011F8FCC6F1329E1CE8AB@mhtml.blink>
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/wiki/Generator_(computer_programming)

<!DOCTYPE html><html class="client-js" lang="en" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="cid:css-08bb4fba-9f69-4b9f-a4a7-11f9f33487e1@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-62b5c400-a4ef-47c5-843d-f224050a5c09@mhtml.blink" />

<title>Generator (computer programming) - Wikipedia</title>


<link rel="stylesheet" href="https://en.m.wikipedia.org/w/load.php?lang=en&amp;modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cmediawiki.hlist%7Cmediawiki.ui.button%2Cicon%7Cmobile.init.styles%7Cskins.minerva.base.styles%7Cskins.minerva.content.styles.images%7Cskins.minerva.icons.wikimedia%7Cskins.minerva.mainMenu.icons%2Cstyles&amp;only=styles&amp;skin=minerva">

<meta name="generator" content="MediaWiki 1.38.0-wmf.2">
<meta name="referrer" content="origin">
<meta name="referrer" content="origin-when-crossorigin">
<meta name="referrer" content="origin-when-cross-origin">
<meta name="format-detection" content="telephone=no">
<meta name="theme-color" content="#eaecf0">
<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes, minimum-scale=0.25, maximum-scale=5.0">
<meta property="og:title" content="Generator (computer programming) - Wikipedia">
<meta property="og:type" content="website">
<link rel="preconnect" href="https://upload.wikimedia.org/">
<link rel="manifest" href="https://en.m.wikipedia.org/w/api.php?action=webapp-manifest">
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit">
<link rel="edit" title="Edit this page" href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit">
<link rel="apple-touch-icon" href="https://en.m.wikipedia.org/static/apple-touch/wikipedia.png">
<link rel="shortcut icon" href="https://en.m.wikipedia.org/static/favicon/wikipedia.ico">
<link rel="search" type="application/opensearchdescription+xml" href="https://en.m.wikipedia.org/w/opensearch_desc.php" title="Wikipedia (en)">
<link rel="EditURI" type="application/rsd+xml" href="https://en.wikipedia.org/w/api.php?action=rsd">
<link rel="license" href="https://creativecommons.org/licenses/by-sa/3.0/">
<link rel="canonical" href="https://en.wikipedia.org/wiki/Generator_(computer_programming)">
<link rel="dns-prefetch" href="https://meta.wikimedia.org/">
<link rel="dns-prefetch" href="https://login.wikimedia.org/">
</head>
<body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-Generator_computer_programming rootpage-Generator_computer_programming stable issues-group-B skin-minerva action-view skin--responsive"><div id="mw-mf-viewport">
	<div id="mw-mf-page-center">
		<a class="mw-mf-page-center__mask" href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#"></a>
		<header class="header-container header-chrome">
			<form class="minerva-header" action="https://en.m.wikipedia.org/w/index.php" method="get">
				<nav class="navigation-drawer toggle-list view-border-box">
					<input type="checkbox" id="main-menu-input" class="toggle-list__checkbox" role="button" aria-labelledby="mw-mf-main-menu-button">
					<label for="main-menu-input" id="mw-mf-main-menu-button" class=" mw-ui-button mw-ui-quiet mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-menu-base20 mw-ui-icon-flush-left toggle-list__toggle" title="Open main menu" data-event-name="ui.mainmenu">Open main menu</label>
					<div id="mw-mf-page-left" class="menu toggle-list__list view-border-box">
	<ul id="p-navigation">
			<li class="">
			    <a href="https://en.m.wikipedia.org/wiki/Main_Page" class="" data-mw="interface" data-event-name="menu.home">
			      <span class="mw-ui-icon-minerva-home mw-ui-icon"></span>&nbsp;<span>Home</span>
			     </a>
			</li>
			<li class="">
			    <a href="https://en.m.wikipedia.org/wiki/Special:Random#/random" class="" data-mw="interface" data-event-name="menu.random">
			      <span class="mw-ui-icon-minerva-die mw-ui-icon"></span>&nbsp;<span>Random</span>
			     </a>
			</li>
			<li class="jsonly">
			    <a href="https://en.m.wikipedia.org/wiki/Special:Nearby" class="" data-mw="interface" data-event-name="menu.nearby">
			      <span class="mw-ui-icon-minerva-mapPin mw-ui-icon"></span>&nbsp;<span>Nearby</span>
			     </a>
			</li>
	</ul>
	<ul id="p-personal">
			<li class="">
			    <a href="https://en.m.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Generator+%28computer+programming%29" class="menu__item--login" data-mw="interface" data-event-name="menu.login">
			      <span class="mw-ui-icon-minerva-logIn mw-ui-icon"></span>&nbsp;<span>Log in</span>
			     </a>
			</li>
	</ul>
	<ul id="pt-preferences">
			<li class="jsonly">
			    <a href="https://en.m.wikipedia.org/w/index.php?title=Special:MobileOptions&amp;returnto=Generator+%28computer+programming%29" class="menu__item--settings" data-mw="interface" data-event-name="menu.settings">
			      <span class="mw-ui-icon-minerva-settings mw-ui-icon"></span>&nbsp;<span>Settings</span>
			     </a>
			</li>
	</ul>
	<ul id="p-donation">
			<li class="">
			    <a href="https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikipedia.org&amp;uselang=en&amp;utm_key=minerva" class="" data-mw="interface" data-event-name="menu.donate">
			      <span class="mw-ui-icon-minerva-heart mw-ui-icon"></span>&nbsp;<span>Donate</span>
			     </a>
			</li>
	</ul>
	<ul class="hlist">
			<li class="">
			    <a href="https://en.m.wikipedia.org/wiki/Wikipedia:About" class="" data-mw="interface" data-event-name="">
			      &nbsp;<span>About Wikipedia</span>
			     </a>
			</li>
			<li class="">
			    <a href="https://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" class="" data-mw="interface" data-event-name="">
			      &nbsp;<span>Disclaimers</span>
			     </a>
			</li>
	</ul>
</div>

					<label class="main-menu-mask" for="main-menu-input"></label>
				</nav>
				<div class="branding-box">
					<a href="https://en.m.wikipedia.org/wiki/Main_Page">
						<span><img src="https://en.m.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg" alt="Wikipedia" width="119" height="18" style="width: 7.4375em; height: 1.125em;">

</span>
						
					</a>
				</div>
				<div class="search-box">
					
					<input class="search mw-ui-background-icon-search skin-minerva-search-trigger" type="search" name="search" id="searchInput" autocomplete="off" placeholder="Search Wikipedia" aria-label="Search Wikipedia" value="">
				</div>
				<nav class="minerva-user-navigation" aria-label="User navigation">
					<div><button id="searchIcon" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-search-base20 skin-minerva-search-trigger mw-ui-button mw-ui-quiet" type="submit">Search</button></div>
					
				</nav>
			</form>
		</header>
		<main id="content" class="mw-body">
			<div class="banner-container">
			<div id="siteNotice"></div>
			</div>
			<div class="pre-content heading-holder">
				<div class="page-heading">
					<h1 id="section_0">Generator (computer programming)</h1>
					<div class="tagline"></div>
				</div>
				<nav class="page-actions-menu">
	<ul id="page-actions" class="page-actions-menu__list">
		<li id="language-selector" class="page-actions-menu__list-item">
				<a id="" href="https://en.m.wikipedia.org/wiki/Special:MobileLanguages/Generator_(computer_programming)" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-language-base20 mw-ui-button mw-ui-quiet mw-ui-icon-with-label-desktop mw-ui-button mw-ui-quiet  language-selector" data-mw="interface" data-event-name="menu.languages" role="button" title="Language">Language</a>
		</li>
		<li id="page-actions-watch" class="page-actions-menu__list-item">
				<a id="ca-watch" href="https://en.m.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Generator+%28computer+programming%29" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-star-base20 mw-ui-icon-with-label-desktop watch-this-article mw-ui-button mw-ui-quiet mw-watchlink menu__item--page-actions-watch" data-mw="interface" data-event-name="menu.watch" role="button" title="Watch" aria-controls="mw-watchlink-notification">Watch</a>
		</li>
		<li id="page-actions-edit" class="page-actions-menu__list-item">
				<a id="ca-edit" href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=0" class="edit-page menu__item--page-actions-edit mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 mw-ui-icon-with-label-desktop mw-ui-button mw-ui-quiet" data-mw="interface" data-event-name="menu.edit" role="button" title="Edit the lead section of this page">Edit</a>
		</li>
	</ul>
</nav>
<!-- version 1.0.2 (change every time you update a partial) -->

				
				<div class="minerva__subtitle"></div>
			</div>
			<div id="bodyContent" class="content"><div id="mw-content-text" class="mw-body-content mw-content-ltr" lang="en" dir="ltr"><div class="mw-parser-output"><section class="mf-section-0" id="mf-section-0"><div role="note" class="hatnote navigation-not-searchable">For other uses, see <a href="https://en.m.wikipedia.org/wiki/Generator_(disambiguation)#Computing" class="mw-redirect mw-disambig" title="Generator (disambiguation)">Generator (disambiguation) §&nbsp;Computing</a>.</div>
<table class="box-More_citations_needed plainlinks metadata ambox ambox-content ambox-Refimprove" role="presentation"><tbody><tr><td class="mbox-text"><div class="mbox-text-span">This article <b>needs additional citations for <a href="https://en.m.wikipedia.org/wiki/Wikipedia:Verifiability" title="Wikipedia:Verifiability">verification</a></b>.<span class="hide-when-compact"> Please help <a class="external text" href="https://en.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit">improve this article</a> by <a href="https://en.m.wikipedia.org/wiki/Help:Referencing_for_beginners" title="Help:Referencing for beginners">adding citations to reliable sources</a>. Unsourced material may be challenged and removed.<br><small><span class="plainlinks"><i>Find sources:</i>&nbsp;<a rel="nofollow" class="external text" href="https://www.google.com/search?as_eq=wikipedia&amp;q=%22Generator%22+computer+programming">"Generator"&nbsp;computer programming</a>&nbsp;–&nbsp;<a rel="nofollow" class="external text" href="https://www.google.com/search?tbm=nws&amp;q=%22Generator%22+computer+programming+-wikipedia">news</a>&nbsp;<b>·</b> <a rel="nofollow" class="external text" href="https://www.google.com/search?&amp;q=%22Generator%22+computer+programming&amp;tbs=bkt:s&amp;tbm=bks">newspapers</a>&nbsp;<b>·</b> <a rel="nofollow" class="external text" href="https://www.google.com/search?tbs=bks:1&amp;q=%22Generator%22+computer+programming+-wikipedia">books</a>&nbsp;<b>·</b> <a rel="nofollow" class="external text" href="https://scholar.google.com/scholar?q=%22Generator%22+computer+programming">scholar</a>&nbsp;<b>·</b> <a rel="nofollow" class="external text" href="https://www.jstor.org/action/doBasicSearch?Query=%22Generator%22+computer+programming&amp;acc=on&amp;wc=on">JSTOR</a></span></small></span>  <span class="date-container"><i>(<span class="date">July 2007</span>)</i></span><span class="hide-when-compact"><i> (<a href="https://en.m.wikipedia.org/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this template message</a>)</i></span></div></td></tr></tbody></table><p>In <a href="https://en.m.wikipedia.org/wiki/Computer_science" title="Computer science">computer science</a>, a <b>generator</b> is a <a href="https://en.m.wikipedia.org/wiki/Subroutine" title="Subroutine">routine</a> that can be used to control the <a href="https://en.m.wikipedia.org/wiki/Iteration" title="Iteration">iteration</a> behaviour of a <a href="https://en.m.wikipedia.org/wiki/Control_flow#Loops" title="Control flow">loop</a>. All generators are also <a href="https://en.m.wikipedia.org/wiki/Iterator" title="Iterator">iterators</a>.<sup id="cite_ref-1" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-1">[1]</a></sup> A generator is very similar to a function that returns an array, in that a generator has parameters, can be called, and generates a sequence of values. However, instead of building an array containing all the values and returning them all at once, a generator yields the values one at a time, which requires less memory and allows the caller to get started processing the first few values immediately.  In short, a generator <i>looks like</i> a function but <i>behaves like</i> an <a href="https://en.m.wikipedia.org/wiki/Iterator" title="Iterator">iterator</a>.
</p><p>Generators can be implemented in terms of more expressive <a href="https://en.m.wikipedia.org/wiki/Control_flow" title="Control flow">control flow</a> constructs, such as <a href="https://en.m.wikipedia.org/wiki/Coroutine" title="Coroutine">coroutines</a> or first-class <a href="https://en.m.wikipedia.org/wiki/Continuation" title="Continuation">continuations</a>.<sup id="cite_ref-2" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-2">[2]</a></sup> Generators, also known as semicoroutines,<sup id="cite_ref-Ralston2000_3-0" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-Ralston2000-3">[3]</a></sup> are a special case of (and weaker than) coroutines, in that they always yield control back to the caller (when passing a value back), rather than specifying a coroutine to jump to; see <a href="https://en.m.wikipedia.org/wiki/Coroutine#Comparison_with_generators" title="Coroutine">comparison of coroutines with generators</a>.
</p>
<div id="toc" class="toc" role="navigation" aria-labelledby="mw-toc-heading"><input type="checkbox" role="button" id="toctogglecheckbox" class="toctogglecheckbox" style="display:none"><div class="toctitle" lang="en" dir="ltr"><h2 id="mw-toc-heading">Contents</h2><span class="toctogglespan"><label class="toctogglelabel" for="toctogglecheckbox"></label></span></div>
<ul><li class="toclevel-1 tocsection-1"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Uses"><span class="tocnumber">1</span> <span class="toctext">Uses</span></a></li>
<li class="toclevel-1 tocsection-2"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Timeline"><span class="tocnumber">2</span> <span class="toctext">Timeline</span></a>
<ul><li class="toclevel-2 tocsection-3"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Lisp"><span class="tocnumber">2.1</span> <span class="toctext">Lisp</span></a></li>
<li class="toclevel-2 tocsection-4"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#CLU"><span class="tocnumber">2.2</span> <span class="toctext">CLU</span></a></li>
<li class="toclevel-2 tocsection-5"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Icon"><span class="tocnumber">2.3</span> <span class="toctext">Icon</span></a></li>
<li class="toclevel-2 tocsection-6"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#C"><span class="tocnumber">2.4</span> <span class="toctext">C</span></a></li>
<li class="toclevel-2 tocsection-7"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#C++"><span class="tocnumber">2.5</span> <span class="toctext">C++</span></a></li>
<li class="toclevel-2 tocsection-8"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Perl"><span class="tocnumber">2.6</span> <span class="toctext">Perl</span></a></li>
<li class="toclevel-2 tocsection-9"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Tcl"><span class="tocnumber">2.7</span> <span class="toctext">Tcl</span></a></li>
<li class="toclevel-2 tocsection-10"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Haskell"><span class="tocnumber">2.8</span> <span class="toctext">Haskell</span></a></li>
<li class="toclevel-2 tocsection-11"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Racket"><span class="tocnumber">2.9</span> <span class="toctext">Racket</span></a></li>
<li class="toclevel-2 tocsection-12"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#PHP"><span class="tocnumber">2.10</span> <span class="toctext">PHP</span></a></li>
<li class="toclevel-2 tocsection-13"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Ruby"><span class="tocnumber">2.11</span> <span class="toctext">Ruby</span></a></li>
<li class="toclevel-2 tocsection-14"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Java"><span class="tocnumber">2.12</span> <span class="toctext">Java</span></a></li>
<li class="toclevel-2 tocsection-15"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#C#"><span class="tocnumber">2.13</span> <span class="toctext">C#</span></a></li>
<li class="toclevel-2 tocsection-16"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#XL"><span class="tocnumber">2.14</span> <span class="toctext">XL</span></a></li>
<li class="toclevel-2 tocsection-17"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#F#"><span class="tocnumber">2.15</span> <span class="toctext">F#</span></a></li>
<li class="toclevel-2 tocsection-18"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Python"><span class="tocnumber">2.16</span> <span class="toctext">Python</span></a>
<ul><li class="toclevel-3 tocsection-19"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Generator_expressions"><span class="tocnumber">2.16.1</span> <span class="toctext">Generator expressions</span></a></li>
</ul></li>
<li class="toclevel-2 tocsection-20"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#ECMAScript"><span class="tocnumber">2.17</span> <span class="toctext">ECMAScript</span></a></li>
<li class="toclevel-2 tocsection-21"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#R"><span class="tocnumber">2.18</span> <span class="toctext">R</span></a></li>
<li class="toclevel-2 tocsection-22"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Smalltalk"><span class="tocnumber">2.19</span> <span class="toctext">Smalltalk</span></a></li>
</ul></li>
<li class="toclevel-1 tocsection-23"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#See_also"><span class="tocnumber">3</span> <span class="toctext">See also</span></a></li>
<li class="toclevel-1 tocsection-24"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#Notes"><span class="tocnumber">4</span> <span class="toctext">Notes</span></a></li>
<li class="toclevel-1 tocsection-25"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#References"><span class="tocnumber">5</span> <span class="toctext">References</span></a></li>
</ul></div>

</section><h2 class="section-heading"><div class="mw-ui-icon mw-ui-icon-element indicator mw-ui-icon-small mw-ui-icon-flush-left"></div><span class="mw-headline" id="Uses">Uses</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=1" title="Edit section: Uses" data-section="1" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h2><section class="mf-section-1 collapsible-block" id="mf-section-1">
<p>Generators are usually <a href="https://en.m.wikipedia.org/wiki/Execution_(computers)" class="mw-redirect" title="Execution (computers)">invoked</a> inside loops.<sup id="cite_ref-icon_4-0" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-icon-4">[4]</a></sup>  The first time that a generator invocation is reached in a loop, an iterator <a href="https://en.m.wikipedia.org/wiki/Object_(computer_science)" title="Object (computer science)">object</a> is created that encapsulates the state of the generator routine at its beginning, with arguments bound to the corresponding <a href="https://en.m.wikipedia.org/wiki/Parameter_(computer_science)" class="mw-redirect" title="Parameter (computer science)">parameters</a>.  The generator's body is then executed in the context of that iterator until a special <i>yield</i> action is encountered; at that time, the value provided with the <i>yield</i> action is used as the value of the invocation expression.  The next time the same generator invocation is reached in a subsequent iteration, the execution of the generator's body is resumed after the <i>yield</i> action, until yet another <i>yield</i> action is encountered.  In addition to the <i>yield</i> action, execution of the generator body can also be terminated by a <i>finish</i> action, at which time the innermost loop enclosing the generator invocation is terminated. In more complicated situations, a generator may be used manually outside of a loop to create an iterator, which can then be used in various ways.
</p><p>Because generators compute their yielded values only on demand, they are useful for representing <a href="https://en.m.wikipedia.org/wiki/Stream_(computing)" title="Stream (computing)">streams</a>, such as sequences that would be expensive or impossible to compute at once. These include e.g. infinite sequences and live data streams.
</p><p>When eager evaluation is desirable (primarily when the sequence is finite, as otherwise evaluation will never terminate), one can either convert to a <a href="https://en.m.wikipedia.org/wiki/List_(abstract_data_type)" title="List (abstract data type)">list</a>, or use a parallel construction that creates a list instead of a generator. For example, in Python a generator <code>g</code> can be evaluated to a list <code>l</code> via <code>l = list(g)</code>, while in <a href="https://en.m.wikipedia.org/wiki/F_Sharp_programming_language" class="mw-redirect" title="F Sharp programming language">F#</a> the sequence expression <code>seq { ... }</code> evaluates lazily (a generator or sequence) but <code>[ ... ]</code> evaluates eagerly (a list).
</p><p>In the presence of generators, loop constructs of a language – such as for and while – can be reduced into a single loop ... end loop construct; all the usual loop constructs can then be comfortably simulated by using suitable generators in the right way. For example, a ranged loop like <code>for x = 1 to 10</code> can be implemented as iteration through a generator, as in Python's <code>for x in range(1, 10)</code>. Further, <code>break</code> can be implemented as sending <i>finish</i> to the generator and then using <code>continue</code> in the loop.
</p>
</section><h2 class="section-heading"><div class="mw-ui-icon mw-ui-icon-element indicator mw-ui-icon-small mw-ui-icon-flush-left"></div><span class="mw-headline" id="Timeline">Timeline</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=2" title="Edit section: Timeline" data-section="2" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h2><section class="mf-section-2 collapsible-block" id="mf-section-2">
<p>Generators first appeared in <a href="https://en.m.wikipedia.org/wiki/CLU_programming_language" class="mw-redirect" title="CLU programming language">CLU</a> (1975),<sup id="cite_ref-5" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-5">[5]</a></sup> were a prominent feature in the string manipulation language <a href="https://en.m.wikipedia.org/wiki/Icon_(programming_language)" title="Icon (programming language)">Icon</a> (1977) and are now available in <a href="https://en.m.wikipedia.org/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> (2001),<sup id="cite_ref-python_6-0" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-python-6">[6]</a></sup> <a href="https://en.m.wikipedia.org/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>,<sup id="cite_ref-7" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-7">[7]</a></sup> <a href="https://en.m.wikipedia.org/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, the later versions of ECMAScript (as of ES6/ES2015) and other languages.  In CLU and C#, generators are called <i>iterators</i>, and in Ruby, <i>enumerators</i>.
</p>
<h3 class="in-block"><span class="mw-headline" id="Lisp">Lisp</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=3" title="Edit section: Lisp" data-section="3" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>The final <a href="https://en.m.wikipedia.org/wiki/Common_Lisp" title="Common Lisp">Common Lisp</a> standard does not natively provide generators, yet various library implementations exist, such as <a rel="nofollow" class="external text" href="https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node347.html#SECTION003400000000000000000">SERIES</a> documented in CLtL2 or <a rel="nofollow" class="external text" href="https://web.archive.org/web/20110723043455/http://cliki.net/pygen">pygen</a>.
</p>
<h3 class="in-block"><span class="mw-headline" id="CLU">CLU</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=4" title="Edit section: CLU" data-section="4" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>A yield statement is used to implement iterators over user-defined data abstractions.<sup id="cite_ref-Liskov1977_8-0" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-Liskov1977-8">[8]</a></sup></p>
<div class="mw-highlight mw-highlight-lang-text mw-content-ltr" dir="ltr"><pre><span></span>string_chars = iter (s: string) yields (char);
  index: int&nbsp;:= 1;
  limit: int&nbsp;:= string$size (s);
  while index &lt;= limit do
    yield (string$fetch(s, index));
    index&nbsp;:= index + 1;
    end;
end string_chars;

for c: char in string_chars(s) do
   ...
end;
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="Icon">Icon</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=5" title="Edit section: Icon" data-section="5" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>Every expression (including loops) is a generator. The language has many generators built-in and even implements some of the logic semantics using the generator mechanism (<a href="https://en.m.wikipedia.org/wiki/Logical_disjunction" title="Logical disjunction">logical disjunction</a> or "OR" is done this way).
</p><p>Printing squares from 0 to 20 can be achieved using a co-routine by writing:
</p>
<div class="mw-highlight mw-highlight-lang-icon mw-content-ltr" dir="ltr"><pre><span></span>   <span class="kr">local</span> <span class="n">squares</span><span class="p">,</span> <span class="n">j</span>
   <span class="n">squares</span> <span class="o">:=</span> <span class="kr">create</span> <span class="p">(</span><span class="nf">seq</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">^</span> <span class="mi">2</span><span class="p">)</span>
   <span class="kr">every</span> <span class="n">j</span> <span class="o">:=</span> <span class="o">|@</span><span class="n">squares</span> <span class="kr">do</span>
      <span class="kr">if</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">20</span> <span class="kr">then</span>
         <span class="nf">write</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
      <span class="kr">else</span>
         <span class="kr">break</span>
</pre></div>
<p>However, most of the time custom generators are implemented with the "suspend" keyword which functions exactly like the "yield" keyword in CLU.
</p>
<h3 class="in-block"><span class="mw-headline" id="C">C</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=6" title="Edit section: C" data-section="6" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p><a href="https://en.m.wikipedia.org/wiki/C_(programming_language)" title="C (programming language)">C</a> does not have generator functions as a language construct, but, as they are a subset of <a href="https://en.m.wikipedia.org/wiki/Coroutines" class="mw-redirect" title="Coroutines">coroutines</a>, it is simple to implement them using any framework that implements stackful coroutines, such as libdill.<sup id="cite_ref-9" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-9">[9]</a></sup> On POSIX platforms, when the cost of <a href="https://en.m.wikipedia.org/wiki/Context_switching" class="mw-redirect" title="Context switching">context switching</a> per iteration is not a concern, or full <a href="https://en.m.wikipedia.org/wiki/Parallel_computing" title="Parallel computing">parallelism</a> rather than merely <a href="https://en.m.wikipedia.org/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrency</a> is desired, a very simple generator function framework can be implemented using <a href="https://en.m.wikipedia.org/wiki/Pthreads" title="Pthreads">pthreads</a> and <a href="https://en.m.wikipedia.org/wiki/Anonymous_pipe" title="Anonymous pipe">pipes</a>.
</p>
<h3 class="in-block"><span id="C.2B.2B"></span><span class="mw-headline" id="C++">C++</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=7" title="Edit section: C++" data-section="7" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>It is possible to introduce generators into C++ using pre-processor macros. The resulting code might have aspects that are very different from native C++, but the generator syntax can be very uncluttered.<sup id="cite_ref-10" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-10">[10]</a></sup> The set of pre-processor macros defined in this source allow generators defined with the syntax as in the following example:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="n">$generator</span><span class="p">(</span><span class="n">descent</span><span class="p">)</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">   </span><span class="kt">int</span><span class="w"> </span><span class="n">i</span><span class="p">;</span><span class="w"></span>

<span class="w">   </span><span class="c1">// place the constructor of our generator, e.g. </span>
<span class="w">   </span><span class="c1">// descent(int minv, int maxv) {...}</span>
<span class="w">   </span>
<span class="w">   </span><span class="c1">// from $emit to $stop is a body of our generator:</span>
<span class="w">    </span>
<span class="w">   </span><span class="n">$emit</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="w"> </span><span class="c1">// will emit int values. Start of body of the generator.</span>
<span class="w">      </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">10</span><span class="p">;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="o">--</span><span class="n">i</span><span class="p">)</span><span class="w"></span>
<span class="w">         </span><span class="n">$yield</span><span class="p">(</span><span class="n">i</span><span class="p">);</span><span class="w"> </span><span class="c1">// similar to yield in Python,</span>
<span class="w">                    </span><span class="c1">// returns next number in [1..10], reversed.</span>
<span class="w">   </span><span class="n">$stop</span><span class="p">;</span><span class="w"> </span><span class="c1">// stop, end of sequence. End of body of the generator.</span>
<span class="p">};</span><span class="w"></span>
</pre></div>
<p>This can then be iterated using:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">argc</span><span class="p">,</span><span class="w"> </span><span class="kt">char</span><span class="o">*</span><span class="w"> </span><span class="n">argv</span><span class="p">[])</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">  </span><span class="n">descent</span><span class="w"> </span><span class="n">gen</span><span class="p">;</span><span class="w"></span>
<span class="w">  </span><span class="k">for</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">n</span><span class="p">;</span><span class="w"> </span><span class="n">gen</span><span class="p">(</span><span class="n">n</span><span class="p">);)</span><span class="w"> </span><span class="c1">// "get next" generator invocation</span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"next number is %d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span><span class="w"> </span><span class="n">n</span><span class="p">);</span><span class="w"></span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>Moreover, <a href="https://en.m.wikipedia.org/wiki/C%2B%2B11" title="C++11">C++11</a> allows <a href="https://en.m.wikipedia.org/wiki/Foreach_loop" title="Foreach loop">foreach loops</a> to be applied to any class that provides the <code>begin</code> and <code>end</code> functions. It's then possible to write generator-like classes by defining both the iterable methods (<code>begin</code> and <code>end</code>) and the iterator methods (<code>operator!=</code>, <code>operator++</code> and <code>operator*</code>) in the same class. For example, it is possible to write the following program:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;iostream&gt;</span><span class="cp"></span>
<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="nl">i</span><span class="p">:</span><span class="w"> </span><span class="n">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span><span class="w"></span>
<span class="w">    </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="w"></span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="w"></span>
</pre></div>
<p>A basic range implementation would look like that:
</p>
<div class="mw-highlight mw-highlight-lang-cpp mw-content-ltr" dir="ltr"><pre><span></span><span class="k">class</span> <span class="nc">range</span>
<span class="p">{</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">last</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">iter</span><span class="p">;</span>

<span class="k">public</span><span class="o">:</span>
    <span class="n">range</span><span class="p">(</span><span class="kt">int</span> <span class="n">end</span><span class="p">)</span><span class="o">:</span>
        <span class="n">last</span><span class="p">(</span><span class="n">end</span><span class="p">),</span>
        <span class="n">iter</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="p">{}</span>

    <span class="c1">// Iterable functions</span>
    <span class="k">const</span> <span class="n">range</span><span class="o">&amp;</span> <span class="n">begin</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">const</span> <span class="n">range</span><span class="o">&amp;</span> <span class="n">end</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span> <span class="p">}</span>

    <span class="c1">// Iterator functions</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="o">!=</span><span class="p">(</span><span class="k">const</span> <span class="n">range</span><span class="o">&amp;</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">iter</span> <span class="o">&lt;</span> <span class="n">last</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">void</span> <span class="k">operator</span><span class="o">++</span><span class="p">()</span> <span class="p">{</span> <span class="o">++</span><span class="n">iter</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="k">operator</span><span class="o">*</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">iter</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="Perl">Perl</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=8" title="Edit section: Perl" data-section="8" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>Perl does not natively provide generators, but support is provided by the <a rel="nofollow" class="external text" href="https://metacpan.org/module/Coro::Generator">Coro::Generator</a> module which uses the <a rel="nofollow" class="external text" href="https://metacpan.org/module/Coro">Coro</a> co-routine framework.  Example usage:
</p>
<div class="mw-highlight mw-highlight-lang-perl mw-content-ltr" dir="ltr"><pre><span></span><span class="k">use</span> <span class="nn">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">warnings</span><span class="p">;</span>
<span class="c1"># Enable generator { BLOCK } and yield</span>
<span class="k">use</span> <span class="nn">Coro::Generator</span><span class="p">;</span>
<span class="c1"># Array reference to iterate over</span>
<span class="k">my</span> <span class="nv">$chars</span> <span class="o">=</span> <span class="p">[</span><span class="s">'A'</span><span class="o">...</span><span class="s">'Z'</span><span class="p">];</span>

<span class="c1"># New generator which can be called like a coderef.</span>
<span class="k">my</span> <span class="nv">$letters</span> <span class="o">=</span> <span class="n">generator</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="k">my</span> <span class="nv">$letter</span> <span class="p">(</span><span class="nv">@$chars</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1"># get next letter from $chars</span>
        <span class="n">yield</span> <span class="nv">$letter</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="c1"># Call the generator 15 times.</span>
<span class="k">print</span> <span class="nv">$letters</span><span class="o">-&gt;</span><span class="p">(),</span> <span class="s">"\n"</span> <span class="k">for</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">15</span><span class="p">);</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="Tcl">Tcl</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=9" title="Edit section: Tcl" data-section="9" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>In <a href="https://en.m.wikipedia.org/wiki/Tcl" title="Tcl">Tcl</a> 8.6, the generator mechanism is founded on named <a href="https://en.m.wikipedia.org/wiki/Coroutine" title="Coroutine">coroutines</a>.
</p>
<div class="mw-highlight mw-highlight-lang-tcl mw-content-ltr" dir="ltr"><pre><span></span><span class="k">proc</span> generator <span class="k">{</span><span class="nv">body</span><span class="k">}</span> <span class="k">{</span>
    <span class="nv">coroutine</span> gen<span class="k">[</span><span class="nb">incr</span> <span class="o">::</span>disambiguator<span class="k">]</span> apply <span class="k">{{</span><span class="nv">script</span><span class="k">}</span> <span class="k">{</span>
        <span class="c"># Produce the result of [generator], the name of the generator</span>
        <span class="nv">yield</span> <span class="k">[</span><span class="nb">info</span> coroutine<span class="k">]</span>
        <span class="c"># Do the generation</span>
        <span class="k">eval</span> <span class="nv">$script</span>
        <span class="c"># Finish the loop of the caller using a 'break' exception</span>
        <span class="k">return</span> <span class="o">-</span>code break
    <span class="k">}}</span> <span class="nv">$body</span>
<span class="k">}</span>

<span class="c"># Use a simple 'for' loop to do the actual generation</span>
<span class="k">set</span> count <span class="k">[</span><span class="nv">generator</span> <span class="k">{</span>
    <span class="k">for</span> <span class="k">{set</span> i <span class="mi">10</span><span class="k">}</span> <span class="k">{</span><span class="nv">$i</span> <span class="o">&lt;=</span> <span class="nv">20</span><span class="k">}</span> <span class="k">{</span><span class="nb">incr</span> i<span class="k">}</span> <span class="k">{</span>
        <span class="nv">yield</span> <span class="nv">$i</span>
    <span class="k">}</span>
<span class="k">}]</span>

<span class="c"># Pull values from the generator until it is exhausted</span>
<span class="k">while</span> <span class="mi">1</span> <span class="k">{</span>
    <span class="nb">puts</span> <span class="k">[</span><span class="nv">$count</span><span class="k">]</span>
<span class="k">}</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="Haskell">Haskell</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=10" title="Edit section: Haskell" data-section="10" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>In <a href="https://en.m.wikipedia.org/wiki/Haskell_(programming_language)" title="Haskell (programming language)">Haskell</a>, with its <a href="https://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">lazy evaluation</a> model, everything is a generator - every datum created with a <a href="https://en.m.wikipedia.org/wiki/Non-strict_evaluation" class="mw-redirect" title="Non-strict evaluation">non-strict</a> data constructor is generated on demand. For example,
</p>
<div class="mw-highlight mw-highlight-lang-haskell mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">countfrom</span> <span class="n">n</span> <span class="ow">=</span> <span class="n">n</span> <span class="kt">:</span> <span class="n">countfrom</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="c1">-- Example use: printing out the integers from 10 to 20.</span>
<span class="nf">test1</span> <span class="ow">=</span> <span class="n">mapM_</span> <span class="n">print</span> <span class="o">$</span> <span class="n">takeWhile</span> <span class="p">(</span><span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="o">$</span> <span class="n">countfrom</span> <span class="mi">10</span>

<span class="nf">primes</span> <span class="ow">=</span> <span class="mi">2</span> <span class="kt">:</span> <span class="mi">3</span> <span class="kt">:</span> <span class="n">nextprime</span> <span class="mi">5</span>  <span class="kr">where</span>
  <span class="n">nextprime</span> <span class="n">n</span> <span class="o">|</span> <span class="n">b</span> <span class="ow">=</span> <span class="n">n</span> <span class="kt">:</span> <span class="n">nextprime</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
              <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="n">nextprime</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
    <span class="kr">where</span> <span class="n">b</span> <span class="ow">=</span> <span class="n">all</span> <span class="p">((</span><span class="o">/=</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">rem</span> <span class="n">n</span><span class="p">))</span> <span class="o">$</span> <span class="n">takeWhile</span> <span class="p">((</span><span class="o">&lt;=</span> <span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="o">^</span><span class="mi">2</span><span class="p">))</span> <span class="o">$</span> <span class="n">tail</span> <span class="n">primes</span>
</pre></div>
<p>where <code>(:)</code> is a non-strict list constructor, <i>cons</i>, and <code>$</code> is just a <i>"called-with"</i> operator, used for parenthesization. This uses the standard adaptor function,
</p>
<div class="mw-highlight mw-highlight-lang-haskell mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">takeWhile</span> <span class="n">p</span> <span class="kt">[]</span> <span class="ow">=</span> <span class="kt">[]</span>
<span class="nf">takeWhile</span> <span class="n">p</span> <span class="p">(</span><span class="n">x</span><span class="kt">:</span><span class="n">xs</span><span class="p">)</span> <span class="o">|</span> <span class="n">p</span> <span class="n">x</span> <span class="ow">=</span> <span class="n">x</span> <span class="kt">:</span> <span class="n">takeWhile</span> <span class="n">p</span> <span class="n">xs</span>
                   <span class="o">|</span> <span class="n">otherwise</span> <span class="ow">=</span> <span class="kt">[]</span>
</pre></div>
<p>which re-fetches values agreeable with a predicate, and stops requesting new values as soon as a non-agreeable one is encountered. The shared storage access is used as a universal mediator in Haskell. List comprehensions can be freely used:
</p>
<div class="mw-highlight mw-highlight-lang-haskell mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">test2</span> <span class="ow">=</span> <span class="n">mapM_</span> <span class="n">print</span> <span class="o">$</span> <span class="n">takeWhile</span> <span class="p">(</span><span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">countfrom</span> <span class="mi">10</span><span class="p">]</span>
<span class="nf">test3</span> <span class="ow">=</span> <span class="n">mapM_</span> <span class="n">print</span> <span class="p">[</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">|</span> <span class="n">x</span> <span class="ow">&lt;-</span> <span class="n">takeWhile</span> <span class="p">(</span><span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)</span> <span class="o">$</span> <span class="n">countfrom</span> <span class="mi">10</span><span class="p">]</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="Racket">Racket</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=11" title="Edit section: Racket" data-section="11" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p><a href="https://en.m.wikipedia.org/wiki/Racket_(programming_language)" title="Racket (programming language)">Racket</a> provides several related facilities for generators.  First, its for-loop forms work with <i>sequences</i>, which are a kind of a producer:
</p>
<div class="mw-highlight mw-highlight-lang-racket mw-content-ltr" dir="ltr"><pre><span></span><span class="p">(</span><span class="k">for</span> <span class="p">([</span><span class="n">i</span> <span class="p">(</span><span class="nb">in-range</span> <span class="mi">10</span> <span class="mi">20</span><span class="p">)])</span>
  <span class="p">(</span><span class="nb">printf</span> <span class="s2">"i = ~s</span><span class="se">\n</span><span class="s2">"</span> <span class="n">i</span><span class="p">))</span>
</pre></div>
<p>and these sequences are also first-class values:
</p>
<div class="mw-highlight mw-highlight-lang-racket mw-content-ltr" dir="ltr"><pre><span></span><span class="p">(</span><span class="k">define</span> <span class="n">10-to-20</span> <span class="p">(</span><span class="nb">in-range</span> <span class="mi">10</span> <span class="mi">20</span><span class="p">))</span>
<span class="p">(</span><span class="k">for</span> <span class="p">([</span><span class="n">i</span> <span class="n">10-to-20</span><span class="p">])</span>
  <span class="p">(</span><span class="nb">printf</span> <span class="s2">"i = ~s</span><span class="se">\n</span><span class="s2">"</span> <span class="n">i</span><span class="p">))</span>
</pre></div>
<p>Some sequences are implemented imperatively (with private state variables) and some are implemented as (possibly infinite) lazy lists.  Also, new struct definitions can have a property that specifies how they can be used as sequences.
</p><p>But more directly, Racket comes with a generator library for a more traditional generator specification.  For example,
</p>
<div class="mw-highlight mw-highlight-lang-racket mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">#lang </span><span class="nn">racket</span>
<span class="p">(</span><span class="k">require</span> <span class="n">racket/generator</span><span class="p">)</span>
<span class="p">(</span><span class="k">define</span> <span class="p">(</span><span class="n">ints-from</span> <span class="n">from</span><span class="p">)</span>
  <span class="p">(</span><span class="n">generator</span> <span class="p">()</span>
    <span class="p">(</span><span class="k">for</span> <span class="p">([</span><span class="n">i</span> <span class="p">(</span><span class="nb">in-naturals</span> <span class="n">from</span><span class="p">)])</span> <span class="c1">; infinite sequence of integers from 0</span>
      <span class="p">(</span><span class="n">yield</span> <span class="n">i</span><span class="p">))))</span>
<span class="p">(</span><span class="k">define</span> <span class="n">g</span> <span class="p">(</span><span class="n">ints-from</span> <span class="mi">10</span><span class="p">))</span>
<span class="p">(</span><span class="nb">list</span> <span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="p">(</span><span class="n">g</span><span class="p">)</span> <span class="p">(</span><span class="n">g</span><span class="p">))</span> <span class="c1">; -&gt; '(10 11 12)</span>
</pre></div>
<p>Note that the Racket core implements powerful continuation features, providing general (re-entrant) continuations that are composable, and also delimited continuations.  Using this, the generator library is implemented in Racket.
</p>
<h3 class="in-block"><span class="mw-headline" id="PHP">PHP</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=12" title="Edit section: PHP" data-section="12" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>The community of PHP implemented generators in PHP 5.5. Details can be found in the original <a rel="nofollow" class="external text" href="https://wiki.php.net/rfc/generators">Request for Comments: Generators</a>.
</p><p>Infinite Fibonacci sequence:
</p>
<div class="mw-highlight mw-highlight-lang-php mw-content-ltr" dir="ltr"><pre><span></span><span class="k">function</span> <span class="nf">fibonacci</span><span class="p">()</span>
<span class="p">{</span>
    <span class="nv">$last</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$current</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">yield</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$current</span> <span class="o">=</span> <span class="nv">$last</span> <span class="o">+</span> <span class="nv">$current</span><span class="p">;</span>
        <span class="nv">$last</span> <span class="o">=</span> <span class="nv">$current</span> <span class="o">-</span> <span class="nv">$last</span><span class="p">;</span>
        <span class="k">yield</span> <span class="nv">$current</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nx">fibonacci</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$number</span><span class="p">,</span> <span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Fibonacci sequence with limit:
</p>
<div class="mw-highlight mw-highlight-lang-php mw-content-ltr" dir="ltr"><pre><span></span><span class="k">function</span> <span class="nf">fibonacci</span><span class="p">(</span><span class="nx">int</span> <span class="nv">$limit</span><span class="p">)</span><span class="o">:</span><span class="nx">generator</span> 
<span class="p">{</span>
    <span class="k">yield</span> <span class="nv">$a</span> <span class="o">=</span> <span class="nv">$b</span> <span class="o">=</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
 
    <span class="k">while</span> <span class="p">(</span><span class="o">++</span><span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$limit</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="nv">$a</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$b</span> <span class="o">=</span> <span class="nv">$a</span> <span class="o">+</span> <span class="nv">$b</span><span class="p">)</span> <span class="o">-</span> <span class="nv">$a</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="p">(</span><span class="nx">fibonacci</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$number</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="s2">"</span><span class="si">$number\n</span><span class="s2">"</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Any function which contains a <span style="font-family: 'Courier New';">yield</span> statement is automatically a generator function.
</p>
<h3 class="in-block"><span class="mw-headline" id="Ruby">Ruby</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=13" title="Edit section: Ruby" data-section="13" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>Ruby supports generators (starting from version 1.9) in the form of the built-in Enumerator class.
</p>
<div class="mw-highlight mw-highlight-lang-ruby mw-content-ltr" dir="ltr"><pre><span></span><span class="c1"># Generator from an Enumerator object</span>
<span class="n">chars</span> <span class="o">=</span> <span class="no">Enumerator</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span><span class="s1">'A'</span><span class="p">,</span> <span class="s1">'B'</span><span class="p">,</span> <span class="s1">'C'</span><span class="p">,</span> <span class="s1">'Z'</span><span class="o">]</span><span class="p">)</span>

<span class="mi">4</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">chars</span><span class="o">.</span><span class="n">next</span> <span class="p">}</span>

<span class="c1"># Generator from a block</span>
<span class="n">count</span> <span class="o">=</span> <span class="no">Enumerator</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">yielder</span><span class="o">|</span>
  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="kp">loop</span> <span class="p">{</span> <span class="n">yielder</span><span class="o">.</span><span class="n">yield</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
<span class="k">end</span>

<span class="mi">100</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="nb">puts</span> <span class="n">count</span><span class="o">.</span><span class="n">next</span> <span class="p">}</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="Java">Java</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=14" title="Edit section: Java" data-section="14" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>Java has had a standard interface for implementing iterators since its early days, and since Java 5, the "foreach" construction makes it easy to loop over objects that provide the <code>java.lang.Iterable</code> interface. (The <a href="https://en.m.wikipedia.org/wiki/Java_collections_framework" title="Java collections framework">Java collections framework</a> and other collections frameworks, typically provide iterators for all collections.)
</p><p>However, <a href="https://en.m.wikipedia.org/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> does not have generators built into the language.  This means that creating iterators is often much trickier than in languages with built-in generators, especially when the generation logic is complex. Because all state must be saved and restored every time an item is to be yielded from an iterator, it is not possible to store state in local variables or use built-in looping routines, as when generators are available; instead, all of this must be manually simulated, using object fields to hold local state and loop counters.
</p><p>Even simple iterators built this way tend to be significantly bulkier than those using generators, with a lot of <a href="https://en.m.wikipedia.org/wiki/Boilerplate_code" title="Boilerplate code">boilerplate code</a>.
</p><p>The original example above could be written in <b>Java 5</b> as:
</p>
<div class="mw-highlight mw-highlight-lang-java mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// Iterator implemented as anonymous class.  This uses generics but doesn't need to.</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">:</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">counter</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">next</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="n">UnsupportedOperationException</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">})</span> <span class="p">{</span>
    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
<p>An infinite Fibonacci sequence could also be written in <b>Java 5</b> as an Iterator:
</p>
<div class="mw-highlight mw-highlight-lang-java mw-content-ltr" dir="ltr"><pre><span></span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">fibo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span><span class="p">()</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasNext</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="n">Integer</span> <span class="nf">next</span><span class="p">()</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
                <span class="n">a</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
                <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">temp</span><span class="p">;</span>
                <span class="k">return</span> <span class="n">temp</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nd">@Override</span>
            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">remove</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="n">UnsupportedOperationException</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="c1">// this could then be used as...</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">f</span><span class="p">:</span> <span class="n">fibo</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">"next Fibonacci number is "</span> <span class="o">+</span> <span class="n">f</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">someCondition</span><span class="p">(</span><span class="n">f</span><span class="p">))</span> <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Also an infinite Fibonacci sequence could also be written using <b>Java 8</b> Stream interface:
</p>
<div class="mw-highlight mw-highlight-lang-java mw-content-ltr" dir="ltr"><pre><span></span><span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">myIterable</span> <span class="o">=</span> <span class="n">Stream</span>
        <span class="c1">// Generates Fib sequence</span>
        <span class="p">.</span><span class="na">iterate</span><span class="p">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">[]</span><span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">},</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[]</span> <span class="p">{</span> <span class="n">x</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">})</span>
        <span class="p">.</span><span class="na">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)::</span><span class="n">iterator</span><span class="p">;</span>
<span class="n">myIterable</span><span class="p">.</span><span class="na">forEach</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">::</span><span class="n">println</span><span class="p">);</span>
</pre></div>
<p>Or get an Iterator from the <b>Java 8</b> super-interface BaseStream of Stream interface.
</p>
<div class="mw-highlight mw-highlight-lang-java mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// Save the iterator of a stream that generates fib sequence</span>
<span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">myGenerator</span> <span class="o">=</span> <span class="n">Stream</span>
        <span class="c1">// Generates Fib sequence</span>
        <span class="p">.</span><span class="na">iterate</span><span class="p">(</span><span class="k">new</span> <span class="n">Integer</span><span class="o">[]</span><span class="p">{</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">},</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[]</span> <span class="p">{</span> <span class="n">x</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">x</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">})</span>
        <span class="p">.</span><span class="na">map</span><span class="p">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">).</span><span class="na">iterator</span><span class="p">();</span>

<span class="c1">// Print the first 5 elements</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">myGenerator</span><span class="p">.</span><span class="na">next</span><span class="p">());</span>
<span class="p">}</span>

<span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="s">"done with first iteration"</span><span class="p">);</span>

<span class="c1">// Print the next 5 elements</span>
<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">myGenerator</span><span class="p">.</span><span class="na">next</span><span class="p">());</span>
<span class="p">}</span>

<span class="cm">/* Output:</span>
<span class="cm">1</span>
<span class="cm">1</span>
<span class="cm">2</span>
<span class="cm">3</span>
<span class="cm">5</span>
<span class="cm">done with first iteration</span>
<span class="cm">8</span>
<span class="cm">13</span>
<span class="cm">21</span>
<span class="cm">34</span>
<span class="cm">55 */</span>
</pre></div>
<h3 class="in-block"><span id="C.23"></span><span class="mw-headline" id="C#">C#</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=15" title="Edit section: C#" data-section="15" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>An example C# 2.0 generator (the <code>yield</code> is available since C# version 2.0):
Both of these examples utilize generics, but this is not required. yield keyword also helps in implementing custom stateful iterations over a collection as discussed in this discussion.<sup id="cite_ref-11" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-11">[11]</a></sup></p>
<div class="mw-highlight mw-highlight-lang-csharp mw-content-ltr" dir="ltr"><pre><span></span><span class="c1">// Method that takes an iterable input (possibly an array)</span>
<span class="c1">// and returns all even numbers.</span>
<span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">GetEven</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">numbers</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="kt">int</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">number</span> <span class="p">%</span> <span class="m">2</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">yield</span> <span class="k">return</span> <span class="n">number</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<p>It is possible to use multiple <code>yield return</code> statements and they are applied in sequence on each iteration:
</p>
<div class="mw-highlight mw-highlight-lang-csharp mw-content-ltr" dir="ltr"><pre><span></span><span class="k">public</span> <span class="k">class</span> <span class="nc">CityCollection</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">GetEnumerator</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">yield</span> <span class="k">return</span> <span class="s">"New York"</span><span class="p">;</span>
        <span class="k">yield</span> <span class="k">return</span> <span class="s">"Paris"</span><span class="p">;</span>
        <span class="k">yield</span> <span class="k">return</span> <span class="s">"London"</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="XL">XL</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=16" title="Edit section: XL" data-section="16" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>In <a href="https://en.m.wikipedia.org/wiki/XL_(programming_language)" title="XL (programming language)">XL</a>, iterators are the basis of 'for' loops:
</p>
<div class="mw-highlight mw-highlight-lang-text mw-content-ltr" dir="ltr"><pre><span></span>import IO = XL.UI.CONSOLE

iterator IntegerIterator (var out Counter&nbsp;: integer; Low, High&nbsp;: integer) written Counter in Low..High is
    Counter&nbsp;:= Low
    while Counter &lt;= High loop
        yield
        Counter += 1

// Note that I needs not be declared, because declared 'var out' in the iterator
// An implicit declaration of I as an integer is therefore made here
for I in 1..5 loop
    IO.WriteLn "I=", I
</pre></div>
<h3 class="in-block"><span id="F.23"></span><span class="mw-headline" id="F#">F#</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=17" title="Edit section: F#" data-section="17" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1033289096"><div role="note" class="hatnote navigation-not-searchable">Further information: <a href="https://en.m.wikipedia.org/wiki/Sequence_expression" class="mw-redirect" title="Sequence expression">Sequence expression</a></div>
<p><a href="https://en.m.wikipedia.org/wiki/F_Sharp_(programming_language)" title="F Sharp (programming language)">F#</a> provides generators via <i><a href="https://en.m.wikipedia.org/wiki/Sequence_expression" class="mw-redirect" title="Sequence expression">sequence expressions</a>,</i> since version 1.9.1.<sup id="cite_ref-seq_12-0" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-seq-12">[12]</a></sup> These can define a sequence (lazily evaluated, sequential access) via <code>seq { ... }</code>, a list (eagerly evaluated, sequential access) via <code>[ ... ]</code> or an array (eagerly evaluated, indexed access) via <code>[| ... |]</code> that contain code that generates values. For example,
</p>
<div class="mw-highlight mw-highlight-lang-fsharp mw-content-ltr" dir="ltr"><pre><span></span><span class="n">seq</span> <span class="o">{</span> <span class="k">for</span> <span class="n">b</span> <span class="k">in</span> <span class="mi">0</span> <span class="o">..</span> <span class="mi">25</span> <span class="k">do</span>
          <span class="k">if</span> <span class="n">b</span> <span class="o">&lt;</span> <span class="mi">15</span> <span class="k">then</span>
              <span class="k">yield</span> <span class="n">b</span> <span class="o">*</span> <span class="n">b</span> <span class="o">}</span>
</pre></div>
<p>forms a sequence of squares of numbers from 0 to 14 by filtering out numbers from the range of numbers from 0 to 25.
</p>
<h3 class="in-block"><span class="mw-headline" id="Python">Python</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=18" title="Edit section: Python" data-section="18" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>Generators were added to <a href="https://en.m.wikipedia.org/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> in version 2.2 in 2001.<sup id="cite_ref-python_6-1" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-python-6">[6]</a></sup> An example generator:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Iterator</span>

<span class="k">def</span> <span class="nf">countfrom</span><span class="p">(</span><span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Iterator</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="k">yield</span> <span class="n">n</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="c1"># Example use: printing out the integers from 10 to 20.</span>
<span class="c1"># Note that this iteration terminates normally, despite</span>
<span class="c1"># countfrom() being written as an infinite loop.</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">countfrom</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>

<span class="c1"># Another generator, which produces prime numbers indefinitely as needed.</span>
<span class="kn">import</span> <span class="nn">itertools</span>

<span class="k">def</span> <span class="nf">primes</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Iterator</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="k">yield</span> <span class="mi">2</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
        <span class="c1"># If dividing n by all the numbers in p, up to and including sqrt(n),</span>
        <span class="c1"># produces a non-zero remainder then n is prime.</span>
        <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">f</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">takewhile</span><span class="p">(</span><span class="k">lambda</span> <span class="n">f</span><span class="p">:</span> <span class="n">f</span><span class="o">*</span><span class="n">f</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">,</span> <span class="n">p</span><span class="p">)):</span>
            <span class="k">yield</span> <span class="n">n</span>
            <span class="n">p</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
        <span class="n">n</span> <span class="o">+=</span> <span class="mi">2</span>
</pre></div>
<p>In Python, a generator can be thought of as an <a href="https://en.m.wikipedia.org/wiki/Iterator" title="Iterator">iterator</a> that contains a frozen <a href="https://en.m.wikipedia.org/wiki/Stack_frame" class="mw-redirect" title="Stack frame">stack frame</a>. Whenever <code>next()</code> is called on the iterator, Python resumes the frozen frame, which executes normally until the next <code>yield</code> statement is reached. The generator's frame is then frozen again, and the yielded value is returned to the caller.
</p><p>PEP 380 (implemented in Python 3.3) adds the <code>yield from</code> expression, allowing a generator to delegate part of its operations to another generator or iterable.<sup id="cite_ref-pep380_13-0" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-pep380-13">[13]</a></sup></p>
<h4 class="in-block"><span class="mw-headline" id="Generator_expressions">Generator expressions</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=19" title="Edit section: Generator expressions" data-section="19" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h4>
<p>Python has a syntax modeled on that of <a href="https://en.m.wikipedia.org/wiki/List_comprehension" title="List comprehension">list comprehensions</a>, called a generator expression that aids in the creation of generators.
The following extends the first example above by using a generator expression to compute squares from the <code>countfrom</code> generator function:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="n">squares</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">countfrom</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>

<span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">squares</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">:</span>
        <span class="nb">print</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">break</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="ECMAScript">ECMAScript</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=20" title="Edit section: ECMAScript" data-section="20" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p><a href="https://en.m.wikipedia.org/wiki/ECMAScript" title="ECMAScript">ECMAScript 6</a> (a.k.a. Harmony) introduced generator functions.
</p><p>An infinite Fibonacci sequence can be written using a function generator:
</p>
<div class="mw-highlight mw-highlight-lang-javascript mw-content-ltr" dir="ltr"><pre><span></span><span class="kd">function</span><span class="o">*</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="p">[</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">curr</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0</span><span class="p">,</span> <span class="mf">1</span><span class="p">];</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="nx">limit</span> <span class="o">||</span> <span class="nx">curr</span> <span class="o">&lt;=</span> <span class="nx">limit</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="nx">curr</span><span class="p">;</span>
        <span class="p">[</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">curr</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">curr</span><span class="p">,</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">curr</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// bounded by upper limit 10</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">n</span> <span class="k">of</span> <span class="nx">fibonacci</span><span class="p">(</span><span class="mf">10</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// generator without an upper bound limit</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">n</span> <span class="k">of</span> <span class="nx">fibonacci</span><span class="p">())</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mf">10000</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// manually iterating</span>
<span class="kd">let</span> <span class="nx">fibGen</span> <span class="o">=</span> <span class="nx">fibonacci</span><span class="p">();</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibGen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibGen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 1</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibGen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 2</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibGen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 3</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibGen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 5</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">fibGen</span><span class="p">.</span><span class="nx">next</span><span class="p">().</span><span class="nx">value</span><span class="p">);</span> <span class="c1">// 8</span>

<span class="c1">// picks up from where you stopped</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">n</span> <span class="k">of</span> <span class="nx">fibGen</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">n</span> <span class="o">&gt;</span> <span class="mf">10000</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="R">R</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=21" title="Edit section: R" data-section="21" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>The iterators package can be used for this purpose.<sup id="cite_ref-14" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-14">[14]</a></sup><sup id="cite_ref-15" class="reference"><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_note-15">[15]</a></sup></p>
<div class="mw-highlight mw-highlight-lang-r mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">library</span><span class="p">(</span><span class="n">iterators</span><span class="p">)</span>

<span class="c1"># Example ------------------</span>
<span class="n">abc</span> <span class="o">&lt;-</span> <span class="nf">iter</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s">'a'</span><span class="p">,</span><span class="s">'b'</span><span class="p">,</span><span class="s">'c'</span><span class="p">))</span>
<span class="nf">nextElem</span><span class="p">(</span><span class="n">abc</span><span class="p">)</span>
</pre></div>
<h3 class="in-block"><span class="mw-headline" id="Smalltalk">Smalltalk</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=22" title="Edit section: Smalltalk" data-section="22" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h3>
<p>Example in <a href="https://en.m.wikipedia.org/wiki/Pharo" title="Pharo">Pharo Smalltalk</a>:
</p><p>The <a href="https://en.m.wikipedia.org/wiki/Golden_ratio" title="Golden ratio">Golden ratio</a> generator below returns to each invocation 'goldenRatio next' a better approximation to the Golden Ratio. 
</p>
<div class="mw-highlight mw-highlight-lang-smalltalk mw-content-ltr" dir="ltr"><pre><span></span><span class="nv">goldenRatio</span> <span class="o">:=</span> <span class="nc">Generator</span> <span class="nf">on:</span> [ <span class="o">:</span><span class="nv">g</span> <span class="o">|</span> <span class="o">|</span><span class="nv"> x y z r </span><span class="o">|</span> 
	<span class="nv">x</span> <span class="o">:=</span> <span class="m">0</span><span class="p">.</span>
	<span class="nv">y</span> <span class="o">:=</span> <span class="m">1</span><span class="p">.</span>
	[  
		<span class="nv">z</span> <span class="o">:=</span> <span class="nv">x</span> <span class="nf">+</span> <span class="nv">y</span><span class="p">.</span>
		<span class="nv">r</span> <span class="o">:=</span> (<span class="nv">z</span> <span class="nf">/</span> <span class="nv">y</span>) <span class="nf">asFloat</span><span class="p">.</span>
		<span class="nv">x</span> <span class="o">:=</span> <span class="nv">y</span><span class="p">.</span>
		<span class="nv">y</span> <span class="o">:=</span> <span class="nv">z</span><span class="p">.</span>
		<span class="nv">g</span> <span class="nf">yield:</span> <span class="nv">r</span>
	] <span class="nf">repeat</span>	
]<span class="p">.</span>

<span class="nv">goldenRatio</span> <span class="nf">next</span><span class="p">.</span>
</pre></div>
<p>The expression below returns the next 10 approximations.
</p>
<div class="mw-highlight mw-highlight-lang-smalltalk mw-content-ltr" dir="ltr"><pre><span></span><span class="nc">Character</span> <span class="nf">cr</span> <span class="nf">join:</span> ((<span class="m">1</span> <span class="nf">to:</span> <span class="m">10</span>) <span class="nf">collect:</span> [ <span class="o">:</span><span class="nv">dummy</span> <span class="o">|</span> <span class="nv">ratio</span> <span class="nf">next</span> ])<span class="p">.</span>
</pre></div>
<p>See more in <a rel="nofollow" class="external text" href="https://medium.com/concerning-pharo/pharos-hidden-gem-generator-c51ef88aec26">A hidden gem in Pharo: Generator</a>.
</p>
</section><h2 class="section-heading"><div class="mw-ui-icon mw-ui-icon-element indicator mw-ui-icon-small mw-ui-icon-flush-left"></div><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=23" title="Edit section: See also" data-section="23" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h2><section class="mf-section-3 collapsible-block" id="mf-section-3">
<ul><li><a href="https://en.m.wikipedia.org/wiki/List_comprehension" title="List comprehension">List comprehension</a> for another construct that generates a sequence of values</li>
<li><a href="https://en.m.wikipedia.org/wiki/Iterator" title="Iterator">Iterator</a> for the concept of producing a list one element at a time</li>
<li><a href="https://en.m.wikipedia.org/wiki/Iteratee" title="Iteratee">Iteratee</a> for an alternative</li>
<li><a href="https://en.m.wikipedia.org/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> for producing values when needed</li>
<li><a href="https://en.m.wikipedia.org/wiki/Corecursion" title="Corecursion">Corecursion</a> for potentially infinite data by recursion instead of <i>yield</i></li>
<li><a href="https://en.m.wikipedia.org/wiki/Coroutine" title="Coroutine">Coroutine</a> for even more generalization from subroutine</li>
<li><a href="https://en.m.wikipedia.org/wiki/Continuation" title="Continuation">Continuation</a> for generalization of control flow</li></ul></section><h2 class="section-heading"><div class="mw-ui-icon mw-ui-icon-element indicator mw-ui-icon-small mw-ui-icon-flush-left"></div><span class="mw-headline" id="Notes">Notes</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=24" title="Edit section: Notes" data-section="24" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h2><section class="mf-section-4 collapsible-block" id="mf-section-4">
<div class="mw-references-wrap mw-references-columns"><ol class="references"><li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-1">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="https://stackoverflow.com/q/1022564">What is the difference between an Iterator and a Generator?</a></span>
</li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-2">^</a></b></span> <span class="reference-text"><cite id="CITEREFKiselyov2004" class="citation web cs1">Kiselyov, Oleg (January 2004). <a rel="nofollow" class="external text" href="http://okmij.org/ftp/Scheme/enumerators-callcc.html">"General ways to traverse collections in Scheme"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=General+ways+to+traverse+collections+in+Scheme&amp;rft.date=2004-01&amp;rft.aulast=Kiselyov&amp;rft.aufirst=Oleg&amp;rft_id=http%3A%2F%2Fokmij.org%2Fftp%2FScheme%2Fenumerators-callcc.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGenerator+%28computer+programming%29" class="Z3988"></span></span>
</li>
<li id="cite_note-Ralston2000-3"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-Ralston2000_3-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"><cite id="CITEREFAnthony_Ralston2000" class="citation book cs1">Anthony Ralston (2000). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=yQ9LAQAAIAAJ"><i>Encyclopedia of computer science</i></a>. Nature Pub. Group. <a href="https://en.m.wikipedia.org/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="https://en.m.wikipedia.org/wiki/Special:BookSources/978-1-56159-248-7" title="Special:BookSources/978-1-56159-248-7"><bdi>978-1-56159-248-7</bdi></a><span class="reference-accessdate">. Retrieved <span class="nowrap">11 May</span> 2013</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Encyclopedia+of+computer+science&amp;rft.pub=Nature+Pub.+Group&amp;rft.date=2000&amp;rft.isbn=978-1-56159-248-7&amp;rft.au=Anthony+Ralston&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DyQ9LAQAAIAAJ&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGenerator+%28computer+programming%29" class="Z3988"></span></span>
</li>
<li id="cite_note-icon-4"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-icon_4-0">^</a></b></span> <span class="reference-text">The <a href="https://en.m.wikipedia.org/wiki/Icon_(programming_language)" title="Icon (programming language)">Icon Programming Language</a> utilizes generators to implement its goal directed evaluation. In Icon, generators can be invoked in contexts outside of the normal looping control structures.</span>
</li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-5">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"><cite id="CITEREFLiskov1992" class="citation web cs1"><a href="https://en.m.wikipedia.org/wiki/Barbara_Liskov" title="Barbara Liskov">Liskov, Barbara</a> (April 1992). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20030917041834/http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf">"A History of CLU"</a> <span class="cs1-format">(PDF)</span>. Archived from <a rel="nofollow" class="external text" href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-561.pdf">the original</a> <span class="cs1-format">(pdf)</span> on 2003-09-17<span class="reference-accessdate">. Retrieved <span class="nowrap">2006-01-05</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=A+History+of+CLU&amp;rft.date=1992-04&amp;rft.aulast=Liskov&amp;rft.aufirst=Barbara&amp;rft_id=http%3A%2F%2Fwww.lcs.mit.edu%2Fpublications%2Fpubs%2Fpdf%2FMIT-LCS-TR-561.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGenerator+%28computer+programming%29" class="Z3988"></span></span>
</li>
<li id="cite_note-python-6"><span class="mw-cite-backlink">^ <a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-python_6-0"><sup><i><b>a</b></i></sup></a> <a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-python_6-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text">
Python Enhancement Proposals:
<a rel="nofollow" class="external text" href="https://www.python.org/dev/peps/pep-0255/">PEP 255: Simple Generators</a>,
<a rel="nofollow" class="external text" href="https://www.python.org/dev/peps/pep-0289/">PEP 289: Generator Expressions</a>,
<a rel="nofollow" class="external text" href="https://www.python.org/dev/peps/pep-0342/">PEP 342: Coroutines via Enhanced Generators</a></span>
</li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-7">^</a></b></span> <span class="reference-text">
<a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/9k7k7cf0.aspx">yield (C# Reference)</a></span>
</li>
<li id="cite_note-Liskov1977-8"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-Liskov1977_8-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"><cite id="CITEREFLiskovSnyderAtkinsonSchaffert1977" class="citation journal cs1">Liskov, B.; Snyder, A.; Atkinson, R.; Schaffert, C. (1977). "Abstraction mechanisms in CLU". <i>Communications of the ACM</i>. <b>20</b> (8). <a href="https://en.m.wikipedia.org/wiki/CiteSeerX_(identifier)" class="mw-redirect" title="CiteSeerX (identifier)">CiteSeerX</a>&nbsp;<span class="cs1-lock-free" title="Freely accessible"><a rel="nofollow" class="external text" href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.112.656">10.1.1.112.656</a></span>. <a href="https://en.m.wikipedia.org/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F359763.359789">10.1145/359763.359789</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Communications+of+the+ACM&amp;rft.atitle=Abstraction+mechanisms+in+CLU&amp;rft.volume=20&amp;rft.issue=8&amp;rft.date=1977&amp;rft_id=%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.112.656%23id-name%3DCiteSeerX&amp;rft_id=info%3Adoi%2F10.1145%2F359763.359789&amp;rft.aulast=Liskov&amp;rft.aufirst=B.&amp;rft.au=Snyder%2C+A.&amp;rft.au=Atkinson%2C+R.&amp;rft.au=Schaffert%2C+C.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGenerator+%28computer+programming%29" class="Z3988"></span></span>
</li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-9">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="http://libdill.org/">"Structured Concurrency for C"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Structured+Concurrency+for+C&amp;rft_id=http%3A%2F%2Flibdill.org&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGenerator+%28computer+programming%29" class="Z3988"></span></span>
</li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-10">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://www.codeproject.com/KB/cpp/cpp_generators.aspx">http://www.codeproject.com/KB/cpp/cpp_generators.aspx</a></span>
</li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-11">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://stackoverflow.com/a/15977474">"What is the yield keyword used for in C#?"</a>. <i>stackoverflow.com</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2018-01-01</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=stackoverflow.com&amp;rft.atitle=What+is+the+yield+keyword+used+for+in+C%23%3F&amp;rft_id=https%3A%2F%2Fstackoverflow.com%2Fa%2F15977474&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGenerator+%28computer+programming%29" class="Z3988"></span></span>
</li>
<li id="cite_note-seq-12"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-seq_12-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r999302996"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="http://blogs.msdn.com/dsyme/archive/2007/09/22/some-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx">"Some Details on F# Computation Expressions"</a><span class="reference-accessdate">. Retrieved <span class="nowrap">2007-12-14</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Some+Details+on+F%23+Computation+Expressions&amp;rft_id=http%3A%2F%2Fblogs.msdn.com%2Fdsyme%2Farchive%2F2007%2F09%2F22%2Fsome-details-on-f-computation-expressions-aka-monadic-or-workflow-syntax.aspx&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AGenerator+%28computer+programming%29" class="Z3988"></span></span>
</li>
<li id="cite_note-pep380-13"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-pep380_13-0">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="https://www.python.org/dev/peps/pep-0380/">PEP 380 -- Syntax for Delegating to a Subgenerator</a></span>
</li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-14">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external text" href="https://stackoverflow.com/a/16028448">Generator functions in R</a></span>
</li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="https://en.m.wikipedia.org/wiki/Generator_(computer_programming)#cite_ref-15">^</a></b></span> <span class="reference-text"><a rel="nofollow" class="external free" href="http://cartesianfaith.wordpress.com/2013/01/05/infinite-generators-in-r/">http://cartesianfaith.wordpress.com/2013/01/05/infinite-generators-in-r/</a></span>
</li>
</ol></div>
</section><h2 class="section-heading"><div class="mw-ui-icon mw-ui-icon-element indicator mw-ui-icon-small mw-ui-icon-flush-left"></div><span class="mw-headline" id="References">References</span><span class="mw-editsection"><a href="https://en.m.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;action=edit&amp;section=25" title="Edit section: References" data-section="25" class="mw-ui-icon mw-ui-icon-element mw-ui-icon-wikimedia-edit-base20 edit-page mw-ui-icon-flush-right mw-ui-button mw-ui-quiet">Edit</a></span></h2><section class="mf-section-5 collapsible-block" id="mf-section-5">
<ul><li>Stephan Murer, <a href="https://en.m.wikipedia.org/wiki/Steve_Omohundro" title="Steve Omohundro">Stephen Omohundro</a>, David Stoutamire and Clemens Szyperski: Iteration abstraction in <a href="https://en.m.wikipedia.org/wiki/Sather" title="Sather">Sather</a>.  <i>ACM Transactions on Programming Languages and Systems</i>, 18(1):1-15 (1996) <a rel="nofollow" class="external autonumber" href="http://portal.acm.org/citation.cfm?doid=225540.225541">[1]</a></li></ul>
<!-- 
NewPP limit report
Parsed by mw1389
Cached time: 20210919160231
Cache expiry: 1814400
Reduced expiry: false
Complications: [vary‐revision‐sha1]
CPU time usage: 0.410 seconds
Real time usage: 0.518 seconds
Preprocessor visited node count: 800/1000000
Post‐expand include size: 25088/2097152 bytes
Template argument size: 56/2097152 bytes
Highest expansion depth: 9/40
Expensive parser function count: 4/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 79869/5000000 bytes
Lua time usage: 0.198/10.000 seconds
Lua memory usage: 5302461/52428800 bytes
Number of Wikibase entities loaded: 1/400
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00%  380.160      1 -total
 29.71%  112.959      5 Template:Cite_web
 24.58%   93.442      1 Template:Refimprove
 22.30%   84.790      1 Template:Ambox
 17.23%   65.496      1 Template:Authority_control
 11.41%   43.359      1 Template:Other_uses
 10.90%   41.434      1 Template:Find_sources_mainspace
  2.45%    9.307      1 Template:Further_information
  2.17%    8.235      1 Template:Cite_book
  1.99%    7.564      1 Template:Cite_journal
-->

<!-- Saved in parser cache with key enwiki:pcache:idhash:572997-0!canonical!responsiveimages=0 and timestamp 20210919160230 and revision id 1042592388. Serialized with JSON.
 -->
</section></div></div><div class="printfooter">
Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;oldid=1042592388">https://en.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;oldid=1042592388</a>"</div>
</div>
			<div class="post-content" id="page-secondary-actions">
			
			</div>
		</main>
		<footer class="mw-footer minerva-footer" role="contentinfo">
		<div class="last-modified-bar">
	<div class="post-content last-modified-bar__content">
		<span class="last-modified-bar__icon mw-ui-icon mw-ui-icon-mw-ui-icon-small mw-ui-icon-wikimedia-history-base20 "></span>
		<a class="last-modified-bar__text modified-enhancement" href="https://en.m.wikipedia.org/wiki/Special:History/Generator_(computer_programming)" data-user-name="Jmbeach1" data-user-gender="unknown" data-timestamp="1630870833">
				<span>Last edited on 5 September 2021, at 19:40</span>
		</a>
		<span class="mw-ui-icon mw-ui-icon-small mw-ui-icon-mf-expand-gray mf-mw-ui-icon-rotate-anti-clockwise indicator"></span>
	</div>
</div>

			<div class="post-content footer-content">
			<div id="mw-data-after-content">
	<div class="read-more-container"></div>
</div>

			<h2 class="minerva-footer-logo"><img src="https://en.m.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg" alt="Wikipedia" width="119" height="18" style="width: 7.4375em; height: 1.125em;">

</h2>
			<div class="license">Content is available under <a class="external" rel="nofollow" href="https://creativecommons.org/licenses/by-sa/3.0/">CC BY-SA 3.0</a> unless otherwise noted.</div>
			<ul id="footer-info" class="footer-info hlist hlist-separated">
	<li id="footer-info-lastmod"> This page was last edited on 5 September 2021, at 19:40<span class="anonymous-show">&nbsp;(UTC)</span>.</li>
	<li id="footer-info-copyright">Text is available under the <a rel="license" href="https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License">Creative Commons Attribution-ShareAlike License</a><a rel="license" href="https://creativecommons.org/licenses/by-sa/3.0/" style="display:none;"></a>;
additional terms may apply.  By using this site, you agree to the <a href="https://foundation.wikimedia.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="https://foundation.wikimedia.org/wiki/Privacy_policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a href="https://www.wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
</ul>

			<ul id="footer-places" class="footer-places hlist hlist-separated">
	<li id="footer-places-privacy"><a href="https://foundation.wikimedia.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="https://en.m.wikipedia.org/wiki/Wikipedia:About" title="Wikipedia:About">About Wikipedia</a></li>
	<li id="footer-places-disclaimer"><a href="https://en.m.wikipedia.org/wiki/Wikipedia:General_disclaimer" title="Wikipedia:General disclaimer">Disclaimers</a></li>
	<li id="footer-places-contact"><a href="https://en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
	<li id="footer-places-terms-use"><a href="https://m.wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a></li>
	<li id="footer-places-desktop-toggle"><a id="mw-mf-display-toggle" href="https://en.wikipedia.org/w/index.php?title=Generator_(computer_programming)&amp;mobileaction=toggle_view_desktop">Desktop</a></li>
	<li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li>
	<li id="footer-places-statslink"><a href="https://stats.wikimedia.org/#/en.wikipedia.org">Statistics</a></li>
	<li id="footer-places-cookiestatement"><a href="https://foundation.wikimedia.org/wiki/Cookie_statement">Cookie statement</a></li>
</ul>

			</div>
		</footer>
	</div>
</div>
<div class="mw-notification-area" data-mw="interface"></div>
<!-- v:8.3.1 -->




</body></html>
------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-08bb4fba-9f69-4b9f-a4a7-11f9f33487e1@mhtml.blink

@charset "utf-8";

.mw-parser-output .hatnote { font-style: italic; }

.mw-parser-output div.hatnote { padding-left: 1.6em; margin-bottom: 0.5em; }

.mw-parser-output .hatnote i { font-style: normal; }

.mw-parser-output .hatnote + link + .hatnote { margin-top: -0.5em; }
------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-62b5c400-a4ef-47c5-843d-f224050a5c09@mhtml.blink

@charset "utf-8";

.mw-parser-output cite.citation { font-style: inherit; }

.mw-parser-output .citation q { quotes: "\"" "\"" "'" "'"; }

.mw-parser-output .id-lock-free a, .mw-parser-output .citation .cs1-lock-free a { background: linear-gradient(transparent, transparent), url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg") right 0.1em center / 9px no-repeat; }

.mw-parser-output .id-lock-limited a, .mw-parser-output .id-lock-registration a, .mw-parser-output .citation .cs1-lock-limited a, .mw-parser-output .citation .cs1-lock-registration a { background: linear-gradient(transparent, transparent), url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg") right 0.1em center / 9px no-repeat; }

.mw-parser-output .id-lock-subscription a, .mw-parser-output .citation .cs1-lock-subscription a { background: linear-gradient(transparent, transparent), url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg") right 0.1em center / 9px no-repeat; }

.mw-parser-output .cs1-subscription, .mw-parser-output .cs1-registration { color: rgb(85, 85, 85); }

.mw-parser-output .cs1-subscription span, .mw-parser-output .cs1-registration span { border-bottom: 1px dotted; cursor: help; }

.mw-parser-output .cs1-ws-icon a { background: linear-gradient(transparent, transparent), url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg") right 0.1em center / 12px no-repeat; }

.mw-parser-output code.cs1-code { color: inherit; background: inherit; border: none; padding: inherit; }

.mw-parser-output .cs1-hidden-error { display: none; font-size: 100%; }

.mw-parser-output .cs1-visible-error { font-size: 100%; }

.mw-parser-output .cs1-maint { display: none; color: rgb(51, 170, 51); margin-left: 0.3em; }

.mw-parser-output .cs1-format { font-size: 95%; }

.mw-parser-output .cs1-kern-left, .mw-parser-output .cs1-kern-wl-left { padding-left: 0.2em; }

.mw-parser-output .cs1-kern-right, .mw-parser-output .cs1-kern-wl-right { padding-right: 0.2em; }

.mw-parser-output .citation .mw-selflink { font-weight: inherit; }
------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?lang=en&modules=ext.cite.styles%7Cext.pygments%2CwikimediaBadges%7Cmediawiki.hlist%7Cmediawiki.ui.button%2Cicon%7Cmobile.init.styles%7Cskins.minerva.base.styles%7Cskins.minerva.content.styles.images%7Cskins.minerva.icons.wikimedia%7Cskins.minerva.mainMenu.icons%2Cstyles&only=styles&skin=minerva

@charset "utf-8";

.mw-cite-backlink, .cite-accessibility-label { user-select: none; }

.mw-references-columns { column-width: 30em; margin-top: 0.3em; }

.mw-parser-output .mw-references-columns .references { margin-top: 0px; }

.mw-references-columns li { break-inside: avoid-column; }

ol.references { counter-reset: mw-ref-extends-parent 0 list-item 0; }

ol.references > li { counter-increment: mw-ref-extends-parent 1; counter-reset: mw-ref-extends-child 0; }

ol.references .mw-extended-references { list-style: none; margin-left: 2em; }

.mw-extended-references > li::before { counter-increment: mw-ref-extends-child 1; content: counter(mw-ref-extends-parent) "." counter(mw-ref-extends-child) ". "; }

sup.reference { unicode-bidi: isolate; white-space: nowrap; font-weight: normal; font-style: normal; }

ol.references li:target, sup.reference:target { background-color: rgb(234, 243, 255); }

.mw-ext-cite-error { font-weight: bold; unicode-bidi: embed; }

.mw-ext-cite-error code { background-color: transparent; color: inherit; padding: 1px 2px; }

.mw-cite-dir-ltr .reference-text { direction: ltr; unicode-bidi: embed; }

.mw-cite-dir-rtl .reference-text { direction: rtl; unicode-bidi: embed; }

.mw-references-columns { column-width: 25em; }

@media print {
  .mw-cite-backlink { display: none; }
}

.mw-highlight { unicode-bidi: embed; }

.mw-highlight pre { tab-size: 4; position: relative; }

code code.mw-highlight { background-color: transparent; border: 0px; padding: 0px; }

div.mw-highlight { background-color: inherit; }

.mw-highlight .err { border: 0px; }

.mw-highlight .hll { display: block; }

.mw-highlight-lines pre, .content .mw-highlight-lines pre { }

.mw-content-ltr.mw-highlight-lines pre, .mw-content-ltr.content .mw-highlight-lines pre { padding-left: 3.5em; box-shadow: rgb(240, 240, 240) 2.75em 0px 0px inset; }

.mw-content-ltr.mw-highlight-lines pre .hll, .mw-content-ltr.content .mw-highlight-lines pre .hll { margin-left: -3.5em; padding-left: 3.5em; }

.mw-content-rtl.mw-highlight-lines pre, .mw-content-rtl.content .mw-highlight-lines pre { padding-right: 3.5em; box-shadow: rgb(240, 240, 240) -2.75em 0px 0px inset; }

.mw-content-rtl.mw-highlight-lines pre .hll, .mw-content-rtl.content .mw-highlight-lines pre .hll { margin-right: -3.5em; padding-right: 3.5em; }

.mw-highlight .linenos { position: absolute; box-sizing: border-box; width: 2.75em; background: none; color: rgb(114, 119, 125); white-space: pre; }

.mw-content-ltr.mw-highlight .linenos { left: 0px; text-align: right; margin-right: 4px; }

.mw-content-rtl.mw-highlight .linenos { right: 0px; text-align: left; margin-left: 4px; }

.mw-highlight .linenos::before { content: attr(data-line); }

.mw-highlight a:hover .linenos, .mw-highlight .hll a .linenos { color: rgb(51, 51, 51); }

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

.mw-highlight .hll { background-color: rgb(255, 255, 204); }

.mw-highlight { background: rgb(248, 248, 248); }

.mw-highlight .c { color: rgb(64, 128, 128); font-style: italic; }

.mw-highlight .err { border: 1px solid rgb(255, 0, 0); }

.mw-highlight .k { color: rgb(0, 128, 0); font-weight: bold; }

.mw-highlight .o { color: rgb(102, 102, 102); }

.mw-highlight .ch { color: rgb(64, 128, 128); font-style: italic; }

.mw-highlight .cm { color: rgb(64, 128, 128); font-style: italic; }

.mw-highlight .cp { color: rgb(188, 122, 0); }

.mw-highlight .cpf { color: rgb(64, 128, 128); font-style: italic; }

.mw-highlight .c1 { color: rgb(64, 128, 128); font-style: italic; }

.mw-highlight .cs { color: rgb(64, 128, 128); font-style: italic; }

.mw-highlight .gd { color: rgb(160, 0, 0); }

.mw-highlight .ge { font-style: italic; }

.mw-highlight .gr { color: rgb(255, 0, 0); }

.mw-highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.mw-highlight .gi { color: rgb(0, 160, 0); }

.mw-highlight .go { color: rgb(136, 136, 136); }

.mw-highlight .gp { color: rgb(0, 0, 128); font-weight: bold; }

.mw-highlight .gs { font-weight: bold; }

.mw-highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.mw-highlight .gt { color: rgb(0, 68, 221); }

.mw-highlight .kc { color: rgb(0, 128, 0); font-weight: bold; }

.mw-highlight .kd { color: rgb(0, 128, 0); font-weight: bold; }

.mw-highlight .kn { color: rgb(0, 128, 0); font-weight: bold; }

.mw-highlight .kp { color: rgb(0, 128, 0); }

.mw-highlight .kr { color: rgb(0, 128, 0); font-weight: bold; }

.mw-highlight .kt { color: rgb(176, 0, 64); }

.mw-highlight .m { color: rgb(102, 102, 102); }

.mw-highlight .s { color: rgb(186, 33, 33); }

.mw-highlight .na { color: rgb(125, 144, 41); }

.mw-highlight .nb { color: rgb(0, 128, 0); }

.mw-highlight .nc { color: rgb(0, 0, 255); font-weight: bold; }

.mw-highlight .no { color: rgb(136, 0, 0); }

.mw-highlight .nd { color: rgb(170, 34, 255); }

.mw-highlight .ni { color: rgb(153, 153, 153); font-weight: bold; }

.mw-highlight .ne { color: rgb(210, 65, 58); font-weight: bold; }

.mw-highlight .nf { color: rgb(0, 0, 255); }

.mw-highlight .nl { color: rgb(160, 160, 0); }

.mw-highlight .nn { color: rgb(0, 0, 255); font-weight: bold; }

.mw-highlight .nt { color: rgb(0, 128, 0); font-weight: bold; }

.mw-highlight .nv { color: rgb(25, 23, 124); }

.mw-highlight .ow { color: rgb(170, 34, 255); font-weight: bold; }

.mw-highlight .w { color: rgb(187, 187, 187); }

.mw-highlight .mb { color: rgb(102, 102, 102); }

.mw-highlight .mf { color: rgb(102, 102, 102); }

.mw-highlight .mh { color: rgb(102, 102, 102); }

.mw-highlight .mi { color: rgb(102, 102, 102); }

.mw-highlight .mo { color: rgb(102, 102, 102); }

.mw-highlight .sa { color: rgb(186, 33, 33); }

.mw-highlight .sb { color: rgb(186, 33, 33); }

.mw-highlight .sc { color: rgb(186, 33, 33); }

.mw-highlight .dl { color: rgb(186, 33, 33); }

.mw-highlight .sd { color: rgb(186, 33, 33); font-style: italic; }

.mw-highlight .s2 { color: rgb(186, 33, 33); }

.mw-highlight .se { color: rgb(187, 102, 34); font-weight: bold; }

.mw-highlight .sh { color: rgb(186, 33, 33); }

.mw-highlight .si { color: rgb(187, 102, 136); font-weight: bold; }

.mw-highlight .sx { color: rgb(0, 128, 0); }

.mw-highlight .sr { color: rgb(187, 102, 136); }

.mw-highlight .s1 { color: rgb(186, 33, 33); }

.mw-highlight .ss { color: rgb(25, 23, 124); }

.mw-highlight .bp { color: rgb(0, 128, 0); }

.mw-highlight .fm { color: rgb(0, 0, 255); }

.mw-highlight .vc { color: rgb(25, 23, 124); }

.mw-highlight .vg { color: rgb(25, 23, 124); }

.mw-highlight .vi { color: rgb(25, 23, 124); }

.mw-highlight .vm { color: rgb(25, 23, 124); }

.mw-highlight .il { color: rgb(102, 102, 102); }

.hlist dl, .hlist ol, .hlist ul { margin: 0px; padding: 0px; }

.hlist dl dl, .hlist ol dl, .hlist ul dl, .hlist dl ol, .hlist ol ol, .hlist ul ol, .hlist dl ul, .hlist ol ul, .hlist ul ul { display: inline; }

.hlist dd, .hlist dt, .hlist li { margin: 0px; display: inline; }

ul.hlist li, .hlist > ul li, .hlist > dl li { display: inline-block; margin-right: 8px; }

.hlist-separated li::after { padding-left: 8px; font-size: 1em; line-height: 1; content: "•" !important; }

.hlist-separated :last-child::after { content: none !important; }

.mw-ui-button { background-color: rgb(248, 249, 250); color: rgb(32, 33, 34); display: inline-block; box-sizing: border-box; border: 1px solid rgb(162, 169, 177); border-radius: 2px; cursor: pointer; vertical-align: middle; font-family: inherit; font-size: 1em; font-weight: bold; line-height: 1.28571em; text-align: center; appearance: none; }

.mw-ui-button:not(.mw-ui-icon-element) { min-height: 32px; min-width: 4em; max-width: 28.75em; margin: 0px; padding: 5px 12px; }

.mw-ui-button:not(:disabled) { transition: background-color 100ms ease 0s, color 100ms ease 0s, border-color 100ms ease 0s, box-shadow 100ms ease 0s; }

.mw-ui-button:not(:disabled):visited { color: rgb(32, 33, 34); }

.mw-ui-button:not(:disabled):hover { background-color: rgb(255, 255, 255); color: rgb(64, 66, 68); border-color: rgb(162, 169, 177); }

.mw-ui-button:not(:disabled):focus { color: rgb(32, 33, 34); border-color: rgb(51, 102, 204); box-shadow: rgb(51, 102, 204) 0px 0px 0px 1px inset, rgb(255, 255, 255) 0px 0px 0px 2px inset; outline-width: 0px; }

.mw-ui-button:not(:disabled):active, .mw-ui-button:not(:disabled).is-on { background-color: rgb(200, 204, 209); color: rgb(0, 0, 0); border-color: rgb(114, 119, 125); box-shadow: none; }

.mw-ui-button:disabled { background-color: rgb(200, 204, 209); color: rgb(255, 255, 255); border-color: rgb(200, 204, 209); cursor: default; }

.mw-ui-button.mw-ui-icon-element:not(.mw-ui-icon-with-label-desktop) { color: transparent !important; }

.mw-ui-button.mw-ui-icon-element:not(.mw-ui-icon-with-label-desktop) span { display: block; clip: rect(1px, 1px, 1px, 1px); width: 1px; height: 1px; margin: -1px; border: 0px; padding: 0px; overflow: hidden; position: absolute !important; }

@media (max-width: 1000px) {
  .mw-ui-button.mw-ui-icon-element.mw-ui-icon-with-label-desktop { color: transparent !important; }
  .mw-ui-button.mw-ui-icon-element span { display: block; clip: rect(1px, 1px, 1px, 1px); width: 1px; height: 1px; margin: -1px; border: 0px; padding: 0px; overflow: hidden; position: absolute !important; }
}

.mw-ui-button.mw-ui-quiet, .mw-ui-button.mw-ui-quiet.mw-ui-progressive, .mw-ui-button.mw-ui-quiet.mw-ui-destructive { background-color: transparent; color: rgb(32, 33, 34); border-color: transparent; font-weight: bold; }

.mw-ui-button.mw-ui-quiet:not(.mw-ui-icon-element), .mw-ui-button.mw-ui-quiet.mw-ui-progressive:not(.mw-ui-icon-element), .mw-ui-button.mw-ui-quiet.mw-ui-destructive:not(.mw-ui-icon-element) { min-height: 32px; }

input[type="checkbox"]:hover + .mw-ui-button.mw-ui-quiet, input[type="checkbox"]:hover + .mw-ui-button.mw-ui-quiet.mw-ui-progressive, input[type="checkbox"]:hover + .mw-ui-button.mw-ui-quiet.mw-ui-destructive, .mw-ui-button.mw-ui-quiet:hover, .mw-ui-button.mw-ui-quiet.mw-ui-progressive:hover, .mw-ui-button.mw-ui-quiet.mw-ui-destructive:hover { background-color: rgba(0, 24, 73, 0.027); color: rgb(32, 33, 34); border-color: transparent; }

input[type="checkbox"]:focus + .mw-ui-button.mw-ui-quiet, input[type="checkbox"]:focus + .mw-ui-button.mw-ui-quiet.mw-ui-progressive, input[type="checkbox"]:focus + .mw-ui-button.mw-ui-quiet.mw-ui-destructive, .mw-ui-button.mw-ui-quiet:focus, .mw-ui-button.mw-ui-quiet.mw-ui-progressive:focus, .mw-ui-button.mw-ui-quiet.mw-ui-destructive:focus { color: rgb(32, 33, 34); border-color: rgb(51, 102, 204); box-shadow: rgb(51, 102, 204) 0px 0px 0px 1px inset, rgb(255, 255, 255) 0px 0px 0px 2px inset; }

input[type="checkbox"]:active + .mw-ui-button.mw-ui-quiet, input[type="checkbox"]:active + .mw-ui-button.mw-ui-quiet.mw-ui-progressive, input[type="checkbox"]:active + .mw-ui-button.mw-ui-quiet.mw-ui-destructive, .mw-ui-button.mw-ui-quiet:active, .mw-ui-button.mw-ui-quiet.mw-ui-progressive:active, .mw-ui-button.mw-ui-quiet.mw-ui-destructive:active { background-color: rgba(0, 36, 73, 0.082); color: rgb(0, 0, 0); border-color: rgb(114, 119, 125); box-shadow: none; }

.mw-ui-button.mw-ui-quiet:disabled, .mw-ui-button.mw-ui-quiet.mw-ui-progressive:disabled, .mw-ui-button.mw-ui-quiet.mw-ui-destructive:disabled, .mw-ui-button.mw-ui-quiet:disabled:hover, .mw-ui-button.mw-ui-quiet.mw-ui-progressive:disabled:hover, .mw-ui-button.mw-ui-quiet.mw-ui-destructive:disabled:hover, .mw-ui-button.mw-ui-quiet:disabled:active, .mw-ui-button.mw-ui-quiet.mw-ui-progressive:disabled:active, .mw-ui-button.mw-ui-quiet.mw-ui-destructive:disabled:active { background-color: transparent; color: rgb(114, 119, 125); border-color: transparent; }

.mw-ui-button.mw-ui-progressive:not(:disabled) { background-color: rgb(51, 102, 204); color: rgb(255, 255, 255); border-color: rgb(51, 102, 204); }

.mw-ui-button.mw-ui-progressive:not(:disabled):hover { background-color: rgb(68, 127, 245); border-color: rgb(68, 127, 245); }

.mw-ui-button.mw-ui-progressive:not(:disabled):focus { box-shadow: rgb(51, 102, 204) 0px 0px 0px 1px inset, rgb(255, 255, 255) 0px 0px 0px 2px inset; }

.mw-ui-button.mw-ui-progressive:not(:disabled):active, .mw-ui-button.mw-ui-progressive:not(:disabled).is-on { background-color: rgb(42, 75, 141); border-color: rgb(42, 75, 141); box-shadow: none; }

.mw-ui-button.mw-ui-progressive:disabled { background-color: rgb(200, 204, 209); color: rgb(255, 255, 255); border-color: rgb(200, 204, 209); }

.mw-ui-button.mw-ui-progressive.mw-ui-quiet { color: rgb(51, 102, 204); background-color: transparent; border-color: transparent; }

input[type="checkbox"]:hover + .mw-ui-button.mw-ui-progressive.mw-ui-quiet, .mw-ui-button.mw-ui-progressive.mw-ui-quiet:hover { background-color: rgba(52, 123, 255, 0.2); border-color: transparent; color: rgb(68, 127, 245); }

input[type="checkbox"]:focus + .mw-ui-button.mw-ui-progressive.mw-ui-quiet, .mw-ui-button.mw-ui-progressive.mw-ui-quiet:focus { color: rgb(51, 102, 204); border-color: rgb(51, 102, 204); }

input[type="checkbox"]:active + .mw-ui-button.mw-ui-progressive.mw-ui-quiet, .mw-ui-button.mw-ui-progressive.mw-ui-quiet:active { color: rgb(255, 255, 255); background-color: rgb(42, 75, 141); border-color: rgb(42, 75, 141); }

.mw-ui-button.mw-ui-destructive:not(:disabled) { background-color: rgb(221, 51, 51); color: rgb(255, 255, 255); border-color: rgb(221, 51, 51); }

.mw-ui-button.mw-ui-destructive:not(:disabled):hover { background-color: rgb(255, 66, 66); border-color: rgb(255, 66, 66); }

.mw-ui-button.mw-ui-destructive:not(:disabled):focus { box-shadow: rgb(221, 51, 51) 0px 0px 0px 1px inset, rgb(255, 255, 255) 0px 0px 0px 2px inset; }

.mw-ui-button.mw-ui-destructive:not(:disabled):active, .mw-ui-button.mw-ui-destructive:not(:disabled).is-on { background-color: rgb(179, 36, 36); border-color: rgb(179, 36, 36); box-shadow: none; }

.mw-ui-button.mw-ui-destructive:disabled { background-color: rgb(200, 204, 209); color: rgb(255, 255, 255); border-color: rgb(200, 204, 209); }

.mw-ui-button.mw-ui-destructive.mw-ui-quiet { color: rgb(221, 51, 51); background-color: transparent; border-color: transparent; }

input[type="checkbox"]:hover + .mw-ui-button.mw-ui-destructive.mw-ui-quiet, .mw-ui-button.mw-ui-destructive.mw-ui-quiet:hover { background-color: rgba(209, 29, 19, 0.2); border-color: transparent; color: rgb(255, 66, 66); }

input[type="checkbox"]:focus + .mw-ui-button.mw-ui-destructive.mw-ui-quiet, .mw-ui-button.mw-ui-destructive.mw-ui-quiet:focus { color: rgb(221, 51, 51); border-color: rgb(221, 51, 51); }

input[type="checkbox"]:active + .mw-ui-button.mw-ui-destructive.mw-ui-quiet, .mw-ui-button.mw-ui-destructive.mw-ui-quiet:active { color: rgb(255, 255, 255); background-color: rgb(179, 36, 36); border-color: rgb(179, 36, 36); }

.mw-ui-button.mw-ui-big { font-size: 1.3em; }

.mw-ui-button.mw-ui-block { display: block; width: 100%; margin-left: auto; margin-right: auto; }

a.mw-ui-button { text-decoration: none; }

a.mw-ui-button:hover, a.mw-ui-button:focus { text-decoration: none; }

.mw-ui-button-group > * { min-width: 48px; border-radius: 0px; float: left; }

.mw-ui-button-group > :first-child { border-top-left-radius: 2px; border-bottom-left-radius: 2px; }

.mw-ui-button-group > :not(:first-child) { border-left: 0px; }

.mw-ui-button-group > :last-child { border-top-right-radius: 2px; border-bottom-right-radius: 2px; }

.mw-ui-button-group .is-on .button { cursor: default; }

.mw-ui-icon { font-size: initial; position: relative; display: inline-block; width: 1.25em; height: 1.25em; min-width: 1.25em; min-height: 1.25em; flex-basis: 1.25em; vertical-align: middle; line-height: 0; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; appearance: none; background-color: transparent; margin: 0px; padding: 0px; box-sizing: content-box !important; }

.mw-ui-icon:not(.mw-ui-button) { border: 0px; }

.mw-ui-icon::before { content: ""; display: block; width: 100%; height: 100%; min-width: 1.25em; min-height: 1.25em; background-repeat: no-repeat; background-size: 1.25em 1.25em; background-position: center center; }

.mw-ui-icon-flush-top { margin-top: -0.75em; }

.mw-ui-icon-flush-left { margin-left: -0.75em; }

.mw-ui-icon-flush-right { margin-right: -0.75em; }

.mw-ui-icon-element { border-radius: 2px; padding: 0.75em; transition: background-color 100ms ease 0s; color: transparent; }

.mw-ui-icon-element:focus, .mw-ui-icon-element:active, .mw-ui-icon-element:visited { color: transparent; }

.mw-ui-icon-element:active { background-color: rgba(0, 0, 0, 0.03); }

@media (hover: hover) {
  .mw-ui-icon-element:not(.disabled):hover { background-color: rgba(0, 0, 0, 0.03); }
}

.mw-ui-icon-small { width: 1em; height: 1em; min-width: 1em; min-height: 1em; flex-basis: 1em; line-height: 1em; }

.mw-ui-icon-small::before { content: ""; display: block; width: 100%; height: 100%; min-width: 1em; min-height: 1em; background-repeat: no-repeat; background-size: 1em 1em; background-position: center center; }

.mw-ui-icon-small.mw-ui-icon-element { padding: 0.5625em; }

.mw-ui-icon-small.mw-ui-icon-flush-left { margin-left: -0.5625em; }

.mw-ui-icon-small.mw-ui-icon-flush-right { margin-right: -0.5625em; }

.mw-ui-icon-small.mw-ui-icon-before::before { min-width: 1em; min-height: 1em; margin-right: 0.5625em; }

.mw-ui-icon-before { width: auto; max-width: 100%; }

.mw-ui-icon-before::before { display: inline-block; font-size: initial; width: auto; min-width: 1.25em; min-height: 1.25em; margin-right: 8px; vertical-align: middle; }

.mw-ui-icon-before span { vertical-align: middle; }

@media (min-width: 1000px) {
  .mw-ui-icon-with-label-desktop { width: auto; line-height: inherit; flex-basis: auto; color: rgb(84, 89, 93) !important; font-weight: 500 !important; }
  .mw-ui-icon-with-label-desktop:hover, .mw-ui-icon-with-label-desktop:focus, .mw-ui-icon-with-label-desktop:active, .mw-ui-icon-with-label-desktop:visited { color: rgb(84, 89, 93); text-decoration: none; }
  .mw-ui-icon-with-label-desktop::before { width: auto; display: inline-block; margin-right: 8px; vertical-align: text-bottom; }
}

.client-js .collapsible-block { display: none; }

.client-js .collapsible-block.open-block { display: block; }

.client-nojs .section-heading .indicator { display: none; }

.section-heading, .in-block, .mw-parser-output > h1, .mw-parser-output > h2, .mw-parser-output > h3, .mw-parser-output > h4, .mw-parser-output > h5 { display: table; }

.section-heading .mw-ui-icon, .in-block .mw-ui-icon, .mw-parser-output > h1 .mw-ui-icon, .mw-parser-output > h2 .mw-ui-icon, .mw-parser-output > h3 .mw-ui-icon, .mw-parser-output > h4 .mw-ui-icon, .mw-parser-output > h5 .mw-ui-icon { display: inline-block; font-size: 16px; }

.section-heading .mw-headline, .in-block .mw-headline, .mw-parser-output > h1 .mw-headline, .mw-parser-output > h2 .mw-headline, .mw-parser-output > h3 .mw-headline, .mw-parser-output > h4 .mw-headline, .mw-parser-output > h5 .mw-headline { width: 100%; }

.section-heading > span, .in-block > span, .mw-parser-output > h1 > span, .mw-parser-output > h2 > span, .mw-parser-output > h3 > span, .mw-parser-output > h4 > span, .mw-parser-output > h5 > span { display: table-cell; vertical-align: middle; }

ul.footer-info li, ul.footer-places li { display: none; }

#footer-places-terms-use { float: left; }

#footer-places-terms-use, #footer-places-desktop-toggle, #footer-places-privacy { display: inline-block; }

#footer-places-desktop-toggle::after { content: "" !important; }

@media (min-width: 720px) {
  .client-js [onclick] + .collapsible-block { display: block; }
}

.lazy-image-placeholder { background-color: rgb(234, 236, 240); display: inline-block; vertical-align: middle; }

li .lazy-image-placeholder, span .lazy-image-placeholder { display: inline-block; }

.client-nojs .lazy-image-placeholder { display: none; }

.content a > .lazy-image-placeholder { max-width: 100% !important; }

@media print {
  .lazy-image-placeholder { break-inside: avoid; }
}

@media screen {
  a.new { color: rgb(221, 51, 51); }
  a.mw-selflink { color: inherit; font-weight: bold; text-decoration: inherit; }
  a.mw-selflink:hover { cursor: inherit; text-decoration: inherit; }
  a.mw-selflink:active, a.mw-selflink:visited { color: inherit; }
  a.new:visited { color: rgb(165, 88, 88); }
  .mw-parser-output a.extiw, .mw-parser-output a.external { color: rgb(51, 102, 187); }
  .mw-parser-output a.extiw:visited, .mw-parser-output a.external:visited { color: rgb(102, 51, 102); }
  .mw-parser-output a.extiw:active, .mw-parser-output a.external:active { color: rgb(187, 102, 51); }
  .mw-underline-always a { text-decoration: underline; }
  .mw-underline-never a { text-decoration: none; }
  .plainlinks a.external { background: none !important; padding: 0px !important; }
  .mw-parser-output a.external, .link-https { background-image: url("/w/resources/src/mediawiki.skinning/images/external-ltr.svg?59558"); background-position: right center; background-repeat: no-repeat; padding-right: 13px; }
  .mw-parser-output a.external[href^="mailto:"], .link-mailto { background-image: url("/w/resources/src/mediawiki.skinning/images/mail.svg?8a79c"); background-position: right center; background-repeat: no-repeat; padding-right: 13px; }
  .mw-parser-output a.external[href^="ftp://"], .link-ftp { background-image: url("/w/resources/src/mediawiki.skinning/images/ftp-ltr.svg?c5643"); background-position: right center; background-repeat: no-repeat; padding-right: 13px; }
  .mw-parser-output a.external[href^="irc://"], .mw-parser-output a.external[href^="ircs://"], .link-irc { background-image: url("/w/resources/src/mediawiki.skinning/images/chat-ltr.svg?e0649"); background-position: right center; background-repeat: no-repeat; padding-right: 13px; }
  .mw-parser-output a.external[href$=".ogg"], .mw-parser-output a.external[href$=".OGG"], .mw-parser-output a.external[href$=".mid"], .mw-parser-output a.external[href$=".MID"], .mw-parser-output a.external[href$=".midi"], .mw-parser-output a.external[href$=".MIDI"], .mw-parser-output a.external[href$=".mp3"], .mw-parser-output a.external[href$=".MP3"], .mw-parser-output a.external[href$=".wav"], .mw-parser-output a.external[href$=".WAV"], .mw-parser-output a.external[href$=".wma"], .mw-parser-output a.external[href$=".WMA"], .link-audio { background-image: url("/w/resources/src/mediawiki.skinning/images/audio-ltr.svg?74d04"); background-position: right center; background-repeat: no-repeat; padding-right: 13px; }
  .mw-parser-output a.external[href$=".ogm"], .mw-parser-output a.external[href$=".OGM"], .mw-parser-output a.external[href$=".avi"], .mw-parser-output a.external[href$=".AVI"], .mw-parser-output a.external[href$=".mpeg"], .mw-parser-output a.external[href$=".MPEG"], .mw-parser-output a.external[href$=".mpg"], .mw-parser-output a.external[href$=".MPG"], .link-video { background-image: url("/w/resources/src/mediawiki.skinning/images/video.svg?a3758"); background-position: right center; background-repeat: no-repeat; padding-right: 13px; }
  .mw-parser-output a.external[href$=".pdf"], .mw-parser-output a.external[href$=".PDF"], .mw-parser-output a.external[href*=".pdf#"], .mw-parser-output a.external[href*=".PDF#"], .mw-parser-output a.external[href*=".pdf?"], .mw-parser-output a.external[href*=".PDF?"], .link-document { background-image: url("/w/resources/src/mediawiki.skinning/images/document-ltr.svg?0bf90"); background-position: right center; background-repeat: no-repeat; padding-right: 13px; }
  .mw-parser-output a.extiw, .mw-parser-output a.extiw:active { color: rgb(51, 102, 187); }
  .mw-parser-output a.external { color: rgb(51, 102, 187); }
  .mw-body-content::after { clear: both; content: ""; display: block; }
  .mw-body-content a.external.free { overflow-wrap: break-word; }
  .mw-body-content .error { font-size: larger; color: rgb(221, 51, 51); }
  .rtl .mw-parser-output a.external.free, .rtl .mw-parser-output a.external.autonumber { direction: ltr; unicode-bidi: embed; }
  .mw-hide-empty-elt .mw-parser-output .mw-empty-elt { display: none; }
  @counter-style meetei { system: numeric; symbols: "꯰" "꯱" "꯲" "꯳" "꯴" "꯵" "꯶" "꯷" "꯸" "꯹"; suffix: ") "; }
  @counter-style santali { system: numeric; symbols: "᱐" "᱑" "᱒" "᱓" "᱔" "᱕" "᱖" "᱗" "᱘" "᱙"; }
  ol:lang(azb) li, ol:lang(bcc) li, ol:lang(bgn) li, ol:lang(bqi) li, ol:lang(fa) li, ol:lang(glk) li, ol:lang(kk-arab) li, ol:lang(lrc) li, ol:lang(luz) li, ol:lang(mzn) li { list-style-type: persian; }
  ol:lang(ckb) li, ol:lang(sdh) li { list-style-type: arabic-indic; }
  ol:lang(hi) li, ol:lang(mai) li, ol:lang(mr) li, ol:lang(ne) li { list-style-type: devanagari; }
  ol:lang(as) li, ol:lang(bn) li { list-style-type: bengali; }
  ol:lang(mni) li { list-style-type: meetei; }
  ol:lang(or) li { list-style-type: oriya; }
  ol:lang(sat) li { list-style-type: santali; }
}

@media print {
  .mw-parser-output a.external { }
  .mw-parser-output a.external.text::after, .mw-parser-output a.external.autonumber::after { content: " (" attr(href) ")"; word-break: break-all; overflow-wrap: break-word; }
  .mw-parser-output a.external.text[href^="//"]::after, .mw-parser-output a.external.autonumber[href^="//"]::after { content: " (https:" attr(href) ")"; }
}

div, span, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, ins, em, img, small, strike, strong, sub, sup, tt, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, input, button, select, audio, video { margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: 100%; vertical-align: baseline; background: none; }

table, caption, tbody, tfoot, thead, tr, th, td { font-size: 100%; }

caption { font-weight: bold; }

button { border: 0px; background-color: transparent; cursor: pointer; }

input { line-height: normal; }

ul { list-style: none; }

table { border-collapse: collapse; }

html, body { height: 100%; }

html { font-size: 100%; text-size-adjust: none; }

body { background-color: rgb(255, 255, 255); color: rgb(32, 33, 34); margin: 0px; }

main { display: block; }

.mw-body { border-top: 1px solid transparent; padding-bottom: 32px; }

.overlay-enabled, .mw-body { background-color: rgb(255, 255, 255); }

.header-container { border-bottom: 1px solid rgb(200, 204, 209); padding: 0px 16px; }

.header-container.header-chrome { background-color: rgb(234, 236, 240); border: 0px; box-shadow: rgba(0, 0, 0, 0.08) 0px -1px 3px inset; }

.navigation-drawer--loading, #footer-info-lastmod { display: none; }

.overlay-header, .minerva-header { display: table; width: 100%; border-spacing: 0px; border-collapse: collapse; height: 3.375em; white-space: nowrap; border-top: 1px solid rgb(200, 204, 209); margin-top: -1px; }

.overlay-header > div, .minerva-header > div, .overlay-header > .navigation-drawer, .minerva-header > .navigation-drawer { position: relative; vertical-align: middle; display: table-cell; }

.overlay-header .branding-box, .minerva-header .branding-box { width: auto; opacity: 0.66; }

.overlay-header .branding-box a, .minerva-header .branding-box a { display: block; margin-left: 5px; font-size: 1em; text-decoration: none; color: rgb(32, 33, 34); }

.overlay-header .branding-box a span, .minerva-header .branding-box a span { line-height: 1; font-size: inherit; }

.overlay-header .branding-box a img, .minerva-header .branding-box a img { vertical-align: middle; }

.overlay-header .branding-box a > *, .minerva-header .branding-box a > * { float: left; }

.overlay-header .branding-box a sup, .minerva-header .branding-box a sup { color: rgb(84, 89, 93); display: none; }

.beta .overlay-header .branding-box a sup, .beta .minerva-header .branding-box a sup { display: initial; }

.overlay-header > .header-title, .minerva-header > .header-title { vertical-align: middle; }

#searchInput { cursor: text; }

.search-box, .minerva-header .search-box { display: none; width: auto; }

.search-box .search { background-color: rgb(255, 255, 255); background-position: left 0.5em center; background-repeat: no-repeat; background-size: 1.125em; appearance: none; width: 100%; margin-top: 0px; height: 2.25em; border: 1px solid rgb(255, 255, 255); border-radius: 2px; padding: 7px 0px 7px 2.0625em; box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 1px; outline: 0px; transition: border-color 250ms ease 0s, box-shadow 250ms ease 0s; }

.client-nojs .search-box .search:focus, .search-overlay .search-box .search:focus { border-color: rgb(51, 102, 204); box-shadow: rgb(51, 102, 204) 0px 0px 0px 1px inset, rgba(0, 0, 0, 0.05) 0px 1px 1px; }

input.search::-webkit-search-decoration, input.search::-webkit-search-cancel-button, input.search::-webkit-search-results-button, input.search::-webkit-search-results-decoration { display: none; }

.content h2 { clear: left; }

.content .collapsible-heading .edit-page { visibility: hidden; }

.content .collapsible-heading.open-block .edit-page { visibility: visible; }

.content .mw-parser-output > h2, .content .section-heading { border-bottom: 1px solid rgb(234, 236, 240); margin-bottom: 0.5em; }

.content .mw-parser-output > h1, .content .mw-parser-output > h2, .content .mw-parser-output > h3, .content .mw-parser-output > h4, .content .mw-parser-output > h5 { display: table; }

.content .mw-parser-output > h1 .mw-headline, .content .mw-parser-output > h2 .mw-headline, .content .mw-parser-output > h3 .mw-headline, .content .mw-parser-output > h4 .mw-headline, .content .mw-parser-output > h5 .mw-headline { width: 100%; }

.content .mw-parser-output > h1 > span, .content .mw-parser-output > h2 > span, .content .mw-parser-output > h3 > span, .content .mw-parser-output > h4 > span, .content .mw-parser-output > h5 > span { display: table-cell; }

.content .mw-editsection > .mw-ui-icon-element { margin-top: -0.75em; margin-bottom: -0.75em; }

#page-secondary-actions a { margin: 10px 2px 2px 0px; }

#bodyContent .panel .content, .overlay .content-header, .overlay .panel, .page-list.side-list .list-thumb, .page-list li, .topic-title-list li, .site-link-list li, .drawer, .list-header, .mw-revision { padding-left: 16px; padding-right: 16px; }

.talk-overlay .comment .comment-content, .image-list, .pre-content, #mw-content-text > form > .oo-ui-fieldLayout > .oo-ui-fieldLayout-body, #mw-content-text > form > .oo-ui-widget, .content, .post-content { margin: 0px 16px; }

.minerva__subtitle { margin-top: 10px; margin-bottom: 10px; }

.minerva__subtitle:empty { margin: 0px; }

@media (min-width: 720px) {
  .page-summary-list, .topic-title-list, .site-link-list, .overlay .panel, .list-header { padding-left: 3.35em; padding-right: 3.35em; }
}

.heading-holder { padding: 20px 0px 0px; position: relative; }

.heading-holder .tagline { color: rgb(84, 89, 93); font-size: 0.85em; }

.page-heading { margin-bottom: 12px; }

.mw-ui-icon-element.disabled, .language-selector.disabled { cursor: default; opacity: 0.25; }

#page-actions { position: relative; }

.page-actions-menu { box-sizing: border-box; border-top: 1px solid rgb(234, 236, 240); border-bottom: 1px solid rgb(200, 204, 209); margin-top: -1px; }

.page-actions-menu__list { display: flex; height: 3em; justify-content: space-between; }

.page-actions-menu__list-item { display: flex; justify-content: flex-end; align-items: center; min-width: 0px; overflow: hidden; }

.page-actions-menu__list-item:first-child { flex-grow: 1; justify-content: flex-start; margin-left: -8px; }

.page-actions-menu__list-item:last-child { margin-right: -8px; }

.client-nojs .watch-this-article { visibility: hidden; }

.client-nojs .is-authenticated .watch-this-article { visibility: visible; }

@media not all {
  .client-nojs #page-actions { display: none; }
  .client-nojs #section_0 { border: 0px; }
}

.minerva-user-navigation { display: flex; min-width: 7em; min-height: 3.375em; height: 100%; width: 100%; align-items: center; justify-content: flex-end; position: relative; }

.minerva-user-navigation > :last-child { margin-right: -0.75em; }

.view-border-box *, .view-border-box { box-sizing: border-box; }

.client-js .mw-redirectedfrom, .printfooter, .jsonly { display: none; }

.client-js .jsonly { display: inherit; }

.hidden { display: none !important; }

#mw-mf-viewport { position: relative; height: 100%; }

#mw-mf-page-center { width: 100%; min-height: 100%; position: relative; background-color: rgb(234, 236, 240); }

.content { position: relative; z-index: 0; }

.minerva-footer { border-top: 1px solid rgb(200, 204, 209); overflow: auto; padding-bottom: 6px; }

.client-nojs .mw-footer .indicator { display: none; }

.mw-footer .hlist li::after { color: rgb(51, 102, 204); }

.mw-footer > .post-content { overflow: auto; margin-top: 42px; }

.mw-footer > .post-content > * { margin-bottom: 9px; }

.mw-footer > .post-content > h2, .mw-footer > .post-content .minerva-footer-logo { border-bottom: 1px solid rgb(200, 204, 209); padding-bottom: 10px; margin-top: 42px; font-size: 1em; font-weight: bold; }

.mw-footer > .post-content > h2:first-child, .mw-footer > .post-content .minerva-footer-logo:first-child { margin-top: 0px; }

.mw-footer > .post-content .hlist, .mw-footer > .post-content .license { font-size: 0.875em; }

.last-modified-bar { border-bottom: 1px solid rgb(200, 204, 209); background-color: rgb(234, 236, 240); color: rgb(114, 119, 125); padding-top: 0.75em; padding-bottom: 0.75em; font-size: 0.875rem; transition: background-color 250ms ease 0s, color 250ms ease 0s; }

.last-modified-bar a, .last-modified-bar a:visited { color: rgb(84, 89, 93); }

.last-modified-bar a:nth-child(1), .last-modified-bar a:visited:nth-child(1) { font-weight: bold; }

.last-modified-bar__content { align-items: center; display: flex; }

.last-modified-bar__text { padding-right: 3.5em; padding-left: 0.75em; line-height: 1.65; vertical-align: middle; flex-grow: 1; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }

@media (max-width: 720px) {
  .last-modified-bar__text { padding-right: 1em; }
}

@media print {
  .noprint, .banner-container, .minerva-header, .minerva__tab-container, .page-actions-menu, .post-content { display: none; }
  h1, h2, h3, h4, h5, h6 { break-after: avoid; }
  table, figure, img { break-inside: avoid; }
  img { max-width: 100%; }
  img.image-lazy-loaded { animation: 0s ease 0s 1 normal none running none !important; }
}

@media print and (max-device-width: 720px) {
  @page { margin: 50px 0px; }
  html { padding: 0px 50px; }
  .header-container, .header-container.header-chrome { background: rgb(255, 255, 255); box-shadow: none !important; }
  .minerva-header { border-top: 0px; display: block; height: auto; padding: 0px 16px; }
  .minerva-header .branding-box { padding-left: 0px !important; }
  .minerva-header .branding-box sup { display: none !important; }
  .minerva-header > nav, .minerva-header > div { display: none !important; }
  .minerva-header > .branding-box { height: auto; padding: 0px 0px 51px 50px; display: block !important; }
  .minerva-header > .branding-box h1 { font-size: inherit; }
  .minerva-header > .branding-box h1 > * { float: none; }
  .minerva-header > .branding-box h1 img { height: 41px; width: auto; vertical-align: inherit; }
  .hatnote, .pre-content #page-actions { display: none; }
  .pre-content { display: block; padding: 51px 0px 35px; }
  .pre-content h1 { font-size: 70px; font-weight: normal; font-style: italic; font-stretch: normal; line-height: normal; letter-spacing: normal; text-align: left; color: rgb(0, 0, 0); }
  .pre-content .tagline { font-size: 36px; }
  .mw-body > .content { padding-top: 55px; position: relative; }
  .mw-body > .content::before { top: 0px; }
  .thumbinner { width: auto !important; }
  .thumbinner > a { width: 100%; }
  .thumb { position: relative; text-align: left; padding: 58px 0px !important; margin: 0px !important; }
  .thumb::after { bottom: 30px; }
  .thumb::after, .mw-body > .content::before { position: absolute; left: 0px; content: ""; display: block; width: 55px; height: 2px; background: rgb(153, 153, 153); }
  .thumbcaption { width: 100%; font-style: italic; font-size: 28px; margin-top: 23px !important; }
  [class|="mw-content"] { font-size: 36px; }
  [class|="mw-content"] a { text-decoration: underline; color: rgb(32, 33, 34); }
  [class|="mw-content"] blockquote { color: rgb(84, 89, 93); padding: 5px 39px; font-style: italic; }
  [class|="mw-content"] .section-heading { border-bottom: 0px; padding-bottom: 0px; margin-bottom: 16px; }
  [class|="mw-content"] h2 { font-size: 48px; }
  [class|="mw-content"] h3 { font-size: 40px; margin-bottom: 13px; }
  [class|="mw-content"] h4, [class|="mw-content"] h5, [class|="mw-content"] h6 { font-size: 36px; margin-bottom: 12px; }
  [class|="mw-content"] .wikitable { font-size: 16px; }
  [class|="mw-content"] .infobox { font-size: 30px; }
  .references .mw-cite-backlink { display: none; }
  .references .reference-text { font-style: italic; }
  .references a { text-decoration: none; }
  .references .external.text { background-image: none; }
  .printfooter { display: block; padding-top: 108px; font-size: 30px; }
  #mw-mf-page-center > footer { border-top: 4px solid rgb(0, 0, 0); padding-top: 23px; background: rgb(255, 255, 255) !important; }
  #mw-mf-page-center > footer .mw-ui-icon::before { display: none !important; }
  #mw-mf-page-center > footer .last-modified-bar { background: none !important; border: 0px !important; }
  #mw-mf-page-center > footer .last-modifier-tagline { font-size: 36px; padding-top: 0px !important; padding-bottom: 16px !important; }
  #mw-mf-page-center > footer .last-modified-bar, #mw-mf-page-center > footer .last-modified-bar a { font-weight: bold !important; color: rgb(0, 0, 0) !important; }
  #mw-mf-page-center > footer .post-content { display: block; margin-top: 15px !important; }
  #mw-mf-page-center > footer .post-content .hlist, #mw-mf-page-center > footer .post-content h2 { display: none; }
  #mw-mf-page-center > footer .post-content .license a, #mw-mf-page-center > footer .post-content .license { font-size: 30px; color: rgb(153, 153, 153); font-weight: normal; }
}

.toc { display: none; position: relative; margin: 1em 0px; padding: 0.2em 0.5em; background-color: rgb(248, 249, 250); border: 1px solid rgb(234, 236, 240); box-sizing: border-box; }

.toctogglecheckbox ~ ul { visibility: hidden; height: 0px; }

.toctogglecheckbox:checked ~ ul { visibility: visible; padding-bottom: 20px; height: auto; }

.toctitle { padding: 0px 25px 0px 32px; }

.toctitle .mw-ui-icon { position: absolute; left: 0px; }

.toctitle .toctogglespan + .mw-ui-icon { top: 8px; right: 0px; left: auto; }

.toctogglelabel { cursor: pointer; position: absolute; left: 0px; top: 0px; right: 0px; height: 50px; z-index: 1; }

.client-js .toc .toctitle { visibility: hidden; background-position: right center; font-weight: bold; border-bottom: 0px; }

.client-js .toc .toctitle h2 { display: inline-block; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Lato, Helvetica, Arial, sans-serif; font-size: 1.125em; vertical-align: middle; }

.client-js .toc .tocnumber { display: none; }

.client-js .toc > ul { margin: 0px 22.8571em 0px 32px; padding-left: 0px; font-size: 0.875rem; }

.client-js .toc ul { list-style: none; }

@media screen and (min-width: 720px) {
  .client-js .toc { display: table; }
  .client-js .toc .toctitle { visibility: visible; }
}

body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Lato, Helvetica, Arial, sans-serif; line-height: 1.4; -webkit-tap-highlight-color: rgba(0, 0, 0, 0.2); overflow-y: scroll; }

.content { line-height: 1.65; overflow-wrap: break-word; }

.content .center { width: 100%; text-align: center; }

.content .center > *, .content .center .thumb { margin-left: auto; margin-right: auto; }

@media not all {
  html { font-size: 80%; }
  .content { margin: 0px 12px; }
}

.nomobile { display: none !important; }

@supports (font:-apple-system-body) {
  html { }
  body { font-size: 94.1176%; }
  @media not all {
  body { font-size: 75.2941%; }
}
}

.content figure, .content .thumb { margin: 0.6em 0px; }

.content figure .thumbinner, .content .thumb .thumbinner { margin: 0px auto; max-width: 100% !important; }

.content figcaption, .content .thumbcaption { margin: 0.5em 0px 0px; font-size: 0.8125rem; line-height: 1.5; color: rgb(84, 89, 93); padding: 0px !important; }

.content .thumbcaption { width: auto !important; }

.content .mw-image-border, .content .thumbborder { border: 1px solid rgb(200, 204, 209); }

.content .magnify { display: none; }

.content img { vertical-align: middle; }

.content .floatright { clear: right; float: right; margin: 0px 0px 0.6em 0.6em; }

.content .floatleft { clear: left; float: left; margin: 0px 0.6em 0.6em 0px; }

.content a > img, .content noscript > img { max-width: 100% !important; height: auto !important; }

.content .noresize { max-width: 100%; overflow-x: auto; }

.content .noresize a > img { max-width: none !important; }

h1 { font-size: 1.7em; }

h2 { font-size: 1.5em; }

h3 { font-size: 1.2em; font-weight: bold; }

h4 { font-weight: bold; }

.pre-content h1, .content h1, .content h2 { font-family: "Linux Libertine", Georgia, Times, serif; }

.pre-content h1, .content h1, .content h2, h3, h4, h5, h6 { line-height: 1.3; overflow-wrap: break-word; word-break: break-word; }

.content h2, .content h3, .content h4, .content h5, .content h6 { padding: 0.5em 0px; }

.content p + h3 { margin-top: 1.5em; }

.content { }

.content ol { padding-left: 2.25em; }

.content ul { list-style-type: disc; padding-left: 1em; }

.content ul > li > ul { list-style-type: circle; }

.content ul > li > ul > li > ul { list-style-type: square; }

.content ol ol, .content ul ol, .content ol ul, .content ul ul { margin-left: 1em; }

.content li { margin-bottom: 10px; }

.content li:last-child { margin-bottom: inherit; }

dl { margin-left: 1em; }

dl dt { font-weight: bold; }

dl dd { display: block; overflow: auto; }

a:not([href]) { color: rgb(32, 33, 34); cursor: pointer; }

a { color: rgb(51, 102, 204); text-decoration: none; background: none; }

a:visited { color: rgb(107, 75, 161); }

a:active { color: rgb(250, 167, 0); }

a:hover { text-decoration: underline; }

a.external { background-size: 10px; background-repeat: no-repeat; background-position: right center; padding-right: 13px; }

.return-link { display: block; font-size: 0.875rem; margin-top: 1.5em; }

.content p { margin: 0.5em 0px 1em; }

.content hr { background-color: rgb(162, 169, 177); height: 1px; border: 0px; }

.content kbd, .content samp, .content code, .content pre { font-family: Menlo, Consolas, "Liberation Mono", "Courier New", monospace; border: 1px solid rgb(200, 204, 209); white-space: pre-wrap; }

.content code { padding: 0.2em 0.5em; }

.content pre { padding: 1em; }

b, strong { font-weight: bold; }

blockquote { border-left: 3px solid rgb(200, 204, 209); padding: 8px 24px 8px 32px; font-family: "Linux Libertine", Georgia, Times, serif; font-size: 1.1em; }

blockquote > :first-child { margin-top: 0px; }

blockquote > :last-child { margin-bottom: 0px; }

blockquote > :only-child { margin-top: 0px; margin-bottom: 0px; }

em, i { font-style: italic; }

sup { vertical-align: super; }

sub { vertical-align: sub; }

sub, sup, .content .mw-ref { font-size: 0.75em; line-height: 1; }

@media (max-width: 720px) {
  .content table { display: block; box-sizing: border-box; width: 100% !important; }
  .content table.wikitable { border: 0px; }
  .content caption { display: block; }
}

.content table { margin: 1em 0px; overflow: auto hidden; }

.content table caption { text-align: left; }

.wikitable { border: 1px solid rgba(84, 89, 93, 0.3); }

.wikitable > tr > th, .wikitable > tr > td, .wikitable > * > tr > th, .wikitable > * > tr > td { border: 1px solid rgba(84, 89, 93, 0.3); padding: 0.2em; }

.wikitable > tr > th, .wikitable > * > tr > th { background-color: rgb(234, 236, 240); text-align: center; }

.ambox, table.ambox { display: none; margin: 0px; }

.issues-group-B .ambox { display: block; }

.client-js .ambox { cursor: pointer; width: auto; background: rgb(248, 249, 250); color: rgb(84, 89, 93); margin-bottom: 1px; }

.client-js .ambox tbody { display: table; width: 100%; }

.client-js .ambox .mbox-text-div, .client-js .ambox .mbox-text-span { display: block; max-height: 3.3em; height: 3.3em; overflow: hidden; }

.client-js .ambox div { margin: 0px !important; padding: 0px !important; }

.client-js .ambox td { position: relative; padding: 8px 8px 8px 32px; }

.client-js .ambox td > div, .client-js .ambox td > span { font-size: 0.8125rem; }

.client-js .ambox b { font-weight: inherit; }

.client-js .ambox a { color: inherit !important; -webkit-tap-highlight-color: rgba(0, 0, 0, 0) !important; }

.client-js .ambox a:hover, .client-js .ambox a:focus { text-decoration: none; outline: inherit; }

.client-js .ambox small, .client-js .ambox .hide-when-compact, .client-js .ambox .mw-collapsible-content, .client-js .ambox .mbox-empty-cell, .client-js .ambox hr, .client-js .ambox .verbose, .client-js .ambox table, .client-js .ambox .mbox-image { display: none; }

.client-js .ambox .mw-ui-icon { position: absolute; left: 8px; top: 11px; }

.client-js .ambox .ambox-learn-more { color: rgb(51, 102, 204); position: absolute; right: 8px; bottom: 8px; z-index: 0; line-height: 1.65; }

.client-js .ambox .ambox-learn-more::before { content: ""; position: absolute; z-index: -1; bottom: 0px; right: 0px; width: 100%; height: 100%; box-sizing: content-box; padding-left: 4em; background: linear-gradient(to right, rgba(248, 249, 250, 0) 0px, rgb(248, 249, 250) 3em); }

@media screen and (min-width: 720px) {
  .client-js .ambox .mbox-text-div, .client-js .ambox .mbox-text-span { height: auto; margin-bottom: 24px !important; }
  .client-js .ambox .ambox-learn-more { left: 32px; right: 0px; background: none; }
  .client-js .ambox .ambox-learn-more::before { top: -1.65em; width: 10px; }
}

.content .reflist { column-gap: 2em; }

.collapsible td { width: auto !important; }

.content { }

.content .vertical-navbox, .content .navbox { display: none; }

.content .action-edit .fmbox, .content .tmbox, .content #coordinates, .content .topicon { display: none !important; }

.content table, .content .infobox { float: none !important; margin-left: 0px !important; margin-right: 0px !important; }

.content .infobox { font-size: 90%; position: relative; border: 1px solid rgb(234, 236, 240); margin-bottom: 2em; background-color: rgb(248, 249, 250); display: flex; flex: 1 1 100%; flex-flow: column nowrap; width: 100% !important; max-width: 100% !important; }

.content .infobox caption { padding: 10px 10px 0px; text-align: center; }

.content .infobox th, .content .infobox td { vertical-align: top; border-width: 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-left-style: initial; border-top-color: initial; border-right-color: initial; border-left-color: initial; border-image: initial; border-bottom-style: solid; border-bottom-color: rgb(234, 236, 240); padding: 7px 10px; }

.content .infobox tbody > tr > td, .content .infobox tbody > tr > th { flex: 1 0 0%; }

.content .infobox td:only-child, .content .infobox th:only-child { width: 100%; }

.content .infobox tr:last-child th, .content .infobox tr:last-child td { border: 0px; }

.content .infobox > tbody, .content .infobox > caption { display: flex; flex-flow: column nowrap; }

.content .infobox > tbody > tr { min-width: 100%; display: flex; flex-flow: row nowrap; }

.content .mw-content-ltr .infobox { text-align: left; }

.content .mw-content-rtl .infobox { text-align: right; }

#filetoc { display: none; }

.references-column-count, .column-count { column-width: 35em; }

.references li:target { background-color: rgb(234, 243, 255); }

.hatnote, .dablink, .rellink { padding: 5px 7px; color: rgb(84, 89, 93); font-size: 0.8125rem; background-color: rgb(248, 249, 250); margin-bottom: 1px; overflow: hidden; }

.hatnote a, .dablink a, .rellink a { color: rgb(51, 102, 204); }

@media (min-width: 720px) {
  .content .vertical-navbox, .content .navbox { display: inherit; }
}

@media (max-width: 720px) {
  .content table.multicol > tr > td, .content table.multicol > tbody > tr > td { display: block !important; width: auto !important; }
  .content .thumb .thumbinner { display: flex; place-content: flex-start center; flex-flow: column wrap; }
  .content .thumb .thumbinner > .thumbcaption { justify-content: space-between; width: 100%; flex: 1 0 100%; order: 1; display: block; }
}

@media screen and (min-width: 720px) {
  .client-js #searchIcon { display: none; }
  .minerva-header .branding-box { width: 10.0625em; }
  .minerva-header .search-box { display: table-cell; width: auto; }
  .minerva-header .search-box .search { width: 23.4375em; }
  .pre-content, #mw-content-text > form, .content, .post-content { max-width: 993.3px; margin: 0px 3.35em; }
  .content figure, .content .thumb { max-width: 704px; }
  .content figure.mw-halign-left, .content .thumb.mw-halign-left, .content figure.tleft, .content .thumb.tleft { float: left; clear: left; margin-right: 1.4em; }
  .content figure.mw-default-size, .content .thumb.mw-default-size, .content figure.mw-halign-right, .content .thumb.mw-halign-right, .content figure.tright, .content .thumb.tright { float: right; clear: right; margin-left: 1.4em; }
  .content table caption { background: inherit; }
  .content table tbody { display: table-row-group; }
  .last-modified-bar { background-color: transparent; padding-left: 0px; padding-right: 0px; font-size: 1em; }
}

@media screen and (min-width: 1000px) {
  .banner-container, .minerva-header, .page-header-bar, .overlay-header, .content, .overlay-content, .content-unstyled, .pre-content, .post-content, #mw-content-text > form { margin-left: auto; margin-right: auto; width: 90%; max-width: 993.3px; }
  .minerva-header { max-width: 995.3px; }
}

@media (min-width: 720px) {
  .content .infobox { margin: 0.5em 0px 1em 35px !important; max-width: 320px !important; width: auto !important; float: right !important; clear: right !important; }
}

toast.mw-notification-type-error, .mw-notification.mw-notification-type-error { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.content.styles.images&image=toast.mw-notification-type-error%2C.mw-notification.mw-notification-type-error&format=original&skin=minerva&version=12akb"); }

a.external { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.content.styles.images&image=a.external&format=original&lang=en&skin=minerva&version=12akb"); }

a.external--reference { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.content.styles.images&image=a.external&variant=reference&format=original&lang=en&skin=minerva&version=12akb"); }

.mw-ui-icon-wikimedia-history-base20::before, .mw-ui-background-icon-history { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=history&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-history-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=history&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-history-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=history&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-language-base20::before, .mw-ui-background-icon-language { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=language&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-language-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=language&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-language-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=language&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-edit-base20::before, .mw-ui-background-icon-edit { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=edit&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-edit-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=edit&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-edit-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=edit&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-editLock-base20::before, .mw-ui-background-icon-editLock { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=editLock&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-editLock-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=editLock&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-editLock-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=editLock&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-search-base20::before, .mw-ui-background-icon-search { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=search&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-search-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=search&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-search-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=search&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-menu-base20::before, .mw-ui-background-icon-menu { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=menu&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-menu-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=menu&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-menu-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=menu&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-star-base20::before, .mw-ui-background-icon-star { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=star&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-star-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=star&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-star-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=star&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-halfStar-base20::before, .mw-ui-background-icon-halfStar { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=halfStar&format=original&lang=en&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-halfStar-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=halfStar&variant=invert&format=original&lang=en&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-halfStar-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=halfStar&variant=progressive&format=original&lang=en&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-unStar-base20::before, .mw-ui-background-icon-unStar { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=unStar&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-unStar-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=unStar&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-unStar-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=unStar&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-userAvatar-base20::before, .mw-ui-background-icon-userAvatar { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=userAvatar&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-userAvatar-invert::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=userAvatar&variant=invert&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-wikimedia-userAvatar-progressive::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.icons.wikimedia&image=userAvatar&variant=progressive&format=original&skin=minerva&version=1sa2z"); }

.mw-ui-icon-minerva-die::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=die&format=original&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-heart::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=heart&format=original&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-home::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=home&format=original&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-logIn::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=logIn&format=original&lang=en&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-logOut::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=logOut&format=original&lang=en&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-settings::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=settings&format=original&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-mapPin::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=mapPin&format=original&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-unStar::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=unStar&format=original&skin=minerva&version=10cnt"); }

.mw-ui-icon-minerva-userContributions::before { background-image: linear-gradient(transparent, transparent), url("/w/load.php?modules=skins.minerva.mainMenu.icons&image=userContributions&format=original&lang=en&skin=minerva&version=10cnt"); }

#mw-mf-page-left { position: fixed; top: 0px; left: 0px; bottom: 0px; min-width: 275px; visibility: hidden; max-width: 80%; z-index: 2; overflow-y: auto; background-color: rgb(234, 236, 240); transform: translate(-100%, 0px); }

@media screen and (min-width: 720px) {
  #mw-mf-page-left { min-width: 320px; }
}

#mw-mf-page-left ul { padding-bottom: 22px; }

.main-menu-mask { position: fixed; inset: 0px; opacity: 0; background: rgba(0, 0, 0, 0.8); z-index: 1; visibility: hidden; }

#main-menu-input:checked ~ .main-menu-mask { visibility: visible; opacity: 0.5; }

#main-menu-input:checked ~ #mw-mf-page-left { visibility: visible; box-shadow: rgba(0, 0, 0, 0.35) 1px 0px 8px 0px; transform: translate(0px, 0px); }

.minerva-animations-ready #mw-mf-page-left { transition: opacity 250ms ease-in-out 0s, visibility 250ms ease-in-out 0s, transform 250ms ease-in-out 0s; }

.minerva-animations-ready .main-menu-mask { transition: opacity 100ms ease-in-out 0s, visibility 0ms linear 100ms; }

.minerva-animations-ready #main-menu-input:checked ~ .main-menu-mask { transition: opacity 100ms ease-in-out 0s; }

.hotfix-T264376 .main-menu-mask { display: none; }

.hotfix-T264376 #main-menu-input:checked ~ .main-menu-mask { display: block; }

#mw-mf-page-left .secondary-action { border-width: 0px 0px 0px 1px; border-top-style: initial; border-right-style: initial; border-bottom-style: initial; border-top-color: initial; border-right-color: initial; border-bottom-color: initial; border-image: initial; font-size: 16px; position: absolute; right: 0px; top: 0px; bottom: 0px; border-left-style: solid; border-left-color: rgb(162, 169, 177); color: transparent; }

#mw-mf-page-left .primary-action { margin-right: 3.5em; }

#mw-mf-page-left ul:first-child li:first-child { border-top: 0px; }

#mw-mf-page-left ul li { background-color: rgb(255, 255, 255); position: relative; border-top: 1px solid rgb(234, 236, 240); margin-top: -1px; }

#mw-mf-page-left ul li:first-child { border-top: 0px; }

#mw-mf-page-left ul li a { color: rgb(84, 89, 93); display: flex; align-items: center; line-height: inherit; max-width: 100%; padding: 12px 10px 12px 15px; }

#mw-mf-page-left ul li a.secondary-action { padding-left: 10px; }

#mw-mf-page-left ul li a:hover { box-shadow: rgb(51, 102, 204) 4px 0px 0px 0px inset; text-decoration: none; }

#mw-mf-page-left ul li a span { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; font-size: 0.875rem; font-weight: bold; }

#mw-mf-page-left ul.hlist li { background-color: transparent; border: 0px; margin: 0px; font-size: 0.75em; }

#mw-mf-page-left ul.hlist li::after { content: none; }

#mw-mf-page-left ul.hlist li a { color: rgb(51, 102, 204); padding: 0.7em 12px; }

#mw-mf-page-left ul.hlist li a:hover { background-color: transparent; box-shadow: none; }

#mw-mf-page-left ul.hlist li a span { font-weight: normal; }

.notifications-overlay { visibility: visible; }

.notifications-overlay.navigation-drawer { display: block; width: auto; right: 0px; box-shadow: rgba(0, 0, 0, 0.35) -5px 0px 0px 0px; transform: translate(100%, 0px); transition: transform 250ms ease-in-out 0s; }

.notifications-overlay.navigation-drawer.visible { transform: translate(0px, 0px); }

@media (min-width: 720px) {
  .notifications-overlay.navigation-drawer { left: 40%; }
  .notifications-overlay.navigation-drawer .overlay-header { margin: 0px; width: 100%; max-width: none; }
  .notifications-overlay.navigation-drawer .overlay-header .cancel { left: 0px; }
}

.toggle-list__checkbox { position: absolute; z-index: -1; opacity: 0; }

.toggle-list__list { background: rgb(255, 255, 255); position: absolute; overflow-y: auto; z-index: 2; box-shadow: rgba(0, 0, 0, 0.24) 0px 5px 17px 0px, rgb(162, 169, 177) 0px 0px 1px; visibility: hidden; opacity: 0; }

.toggle-list__checkbox:checked ~ .toggle-list__list { visibility: visible; opacity: 1; }
------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.content.styles.images&image=a.external&format=original&lang=en&skin=minerva&version=12akb

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="10" height="10" viewBox="0 0 10 10"><g fill="#36c">
	<path d="M8.9 8.9H1.1V1.1h2.8V0H1.1C.5 0 0 .5 0 1.1v7.8C0 9.5.5 10 1.1 10h7.8c.6 0 1.1-.5 1.1-1.1V6.1H8.9v2.8z"/>
	<path d="M10 0H5.6l1.8 1.8L4.2 5l.8.8 3.2-3.2L10 4.4V0z"/>
</g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.icons.wikimedia&image=history&format=original&skin=minerva&version=1sa2z

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>history</title><g fill="#54595d"><path d="M9 6v5h.06l2.48 2.47 1.41-1.41L11 10.11V6z"/><path d="M10 1a9 9 0 00-7.85 13.35L.5 16H6v-5.5l-2.38 2.38A7 7 0 1110 17v2a9 9 0 000-18z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.icons.wikimedia&image=language&format=original&skin=minerva&version=1sa2z

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>language</title><g fill="#54595d"><path d="M20 18h-1.44a.61.61 0 01-.4-.12.81.81 0 01-.23-.31L17 15h-5l-1 2.54a.77.77 0 01-.22.3.59.59 0 01-.4.14H9l4.55-11.47h1.89zm-3.53-4.31L14.89 9.5a11.62 11.62 0 01-.39-1.24q-.09.37-.19.69l-.19.56-1.58 4.19zm-6.3-1.58a13.43 13.43 0 01-2.91-1.41 11.46 11.46 0 002.81-5.37H12V4H7.31a4 4 0 00-.2-.56C6.87 2.79 6.6 2 6.6 2l-1.47.5s.4.89.6 1.5H0v1.33h2.15A11.23 11.23 0 005 10.7a17.19 17.19 0 01-5 2.1q.56.82.87 1.38a23.28 23.28 0 005.22-2.51 15.64 15.64 0 003.56 1.77zM3.63 5.33h4.91a8.11 8.11 0 01-2.45 4.45 9.11 9.11 0 01-2.46-4.45z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.icons.wikimedia&image=edit&format=original&skin=minerva&version=1sa2z

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>edit</title><g fill="#54595d"><path d="M16.77 8l1.94-2a1 1 0 000-1.41l-3.34-3.3a1 1 0 00-1.41 0L12 3.23zM1 14.25V19h4.75l9.96-9.96-4.75-4.75z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.icons.wikimedia&image=search&format=original&skin=minerva&version=1sa2z

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>search</title><g fill="#54595d"><path fill-rule="evenodd" d="M12.2 13.6a7 7 0 111.4-1.4l5.4 5.4-1.4 1.4-5.4-5.4zM13 8A5 5 0 113 8a5 5 0 0110 0z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.icons.wikimedia&image=menu&format=original&skin=minerva&version=1sa2z

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>menu</title><g fill="#54595d"><path d="M1 3v2h18V3zm0 8h18V9H1zm0 6h18v-2H1z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.icons.wikimedia&image=star&format=original&skin=minerva&version=1sa2z

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>star</title><g fill="#54595d"><path d="M20 7h-7L10 .5 7 7H0l5.46 5.47-1.64 7 6.18-3.7 6.18 3.73-1.63-7zm-10 6.9l-3.76 2.27 1-4.28L3.5 8.5h4.61L10 4.6l1.9 3.9h4.6l-3.73 3.4 1 4.28z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.mainMenu.icons&image=die&format=original&skin=minerva&version=10cnt

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>die</title><g fill="#54595d"><path d="M3 1a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V3a2 2 0 00-2-2zm2 16a2 2 0 112-2 2 2 0 01-2 2zM5 7a2 2 0 112-2 2 2 0 01-2 2zm5 5a2 2 0 112-2 2 2 0 01-2 2zm5 5a2 2 0 112-2 2 2 0 01-2 2zm0-10a2 2 0 112-2 2 2 0 01-2 2z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.mainMenu.icons&image=heart&format=original&skin=minerva&version=10cnt

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>heart</title><g fill="#54595d"><path d="M14.75 1A5.24 5.24 0 0010 4 5.24 5.24 0 000 6.25C0 11.75 10 19 10 19s10-7.25 10-12.75A5.25 5.25 0 0014.75 1z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.mainMenu.icons&image=home&format=original&skin=minerva&version=10cnt

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>home</title><g fill="#54595d"><path d="M10 1L0 10h3v9h4v-4.6c0-1.47 1.31-2.66 3-2.66s3 1.19 3 2.66V19h4v-9h3L10 1z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.mainMenu.icons&image=logIn&format=original&lang=en&skin=minerva&version=10cnt

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>log in</title><g fill="#54595d"><path d="M1 11v6c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2H3c-1.1 0-2 .9-2 2v6h8V5l4.75 5L9 15v-4H1z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.mainMenu.icons&image=settings&format=original&skin=minerva&version=10cnt

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20" height="20" viewBox="0 0 20 20"><title>settings</title><g fill="#54595d"><g xmlns:xlink="http://www.w3.org/1999/xlink" transform="translate(10 10)"><path id="a" d="M1.5-10h-3l-1 6.5h5m0 7h-5l1 6.5h3"/><use transform="rotate(45)" xlink:href="#a"/><use transform="rotate(90)" xlink:href="#a"/><use transform="rotate(135)" xlink:href="#a"/></g><path d="M10 2.5a7.5 7.5 0 000 15 7.5 7.5 0 000-15v4a3.5 3.5 0 010 7 3.5 3.5 0 010-7"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/w/load.php?modules=skins.minerva.mainMenu.icons&image=mapPin&format=original&skin=minerva&version=10cnt

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 20 20"><title>map pin</title><g fill="#54595d"><path d="M10 0a7.65 7.65 0 00-8 8c0 2.52 2 5 3 6s5 6 5 6 4-5 5-6 3-3.48 3-6a7.65 7.65 0 00-8-8zm0 11.25A3.25 3.25 0 1113.25 8 3.25 3.25 0 0110 11.25z"/></g></svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z----
Content-Type: image/svg+xml
Content-Transfer-Encoding: binary
Content-Location: https://en.m.wikipedia.org/static/images/mobile/copyright/wikipedia-wordmark-en.svg

<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" width="119" height="18" viewBox="0 0 119 18">
	<title>
		Combined Shape
	</title>
	<g id="Page-1" fill="none" fill-rule="evenodd" stroke="none" stroke-width="1">
		<g id="Group-21" fill="#000" fill-rule="nonzero">
			<path id="Combined-Shape" d="M15.215,0.00444444444 C16.4934828,-0.0045210728 19.200327,0.00258950984 19.746682,0.00415660976 L19.844,0.00444444444 L19.901,0.0564444444 L19.901,0.552444444 C19.901,0.689444444 19.824,0.757444444 19.672,0.757444444 C18.926,0.792444444 18.773,0.866444444 18.5,1.25944444 C18.351,1.47344444 18.057,1.93444444 17.752,2.45244444 L17.752,2.45244444 L15.134,7.34844444 C15.134,7.34844444 15.1085922,7.40153032 15.0613999,7.49993864 L18.26,14.0494444 L18.454,14.1024444 L23.494,2.14144444 C23.669,1.65944444 23.642,1.31744444 23.417,1.11644444 C23.191,0.921444444 23.032,0.804444444 22.448,0.780444444 L21.975,0.757444444 C21.917,0.757444444 21.862,0.736444444 21.809,0.696444444 C21.757,0.659444444 21.73,0.610444444 21.73,0.551444444 L21.73,0.0534444444 L21.802,0.00244444444 L27.496,0.00244444444 L27.496,0.00244444444 L27.554,0.0534444444 L27.554,0.551444444 C27.554,0.686444444 27.477,0.754444444 27.325,0.754444444 C26.579,0.787444444 26.026,0.949444444 25.668,1.23844444 C25.309,1.52944444 25.029,1.92944444 24.828,2.45144444 C24.828,2.45144444 20.193,13.0594444 18.607,16.5864444 C18,17.7424444 17.403,17.6364444 16.878,16.5534444 C16.2206472,15.1996177 14.8556852,12.2137926 13.8529336,10.0063434 C12.7805182,12.2181194 11.3121895,15.2163835 10.584,16.5664444 C9.876,17.7974444 9.293,17.6364444 8.829,16.5984444 C7.218,12.7974444 3.91,6.12344444 2.353,2.38344444 C2.065,1.69444444 1.848,1.25244444 1.643,1.07744444 C1.437,0.904444444 1.009,0.800444444 0.358,0.765444444 C0.119,0.739444444 1.4033219e-13,0.681444444 1.4033219e-13,0.587444444 L1.4033219e-13,0.587444444 L1.4033219e-13,0.0664444444 L0.058,0.0154444444 C0.962117647,0.0103267974 4.8271955,0.0139392541 5.94443039,0.0151124172 L6.248,0.0154444444 L6.306,0.0664444444 L6.306,0.562444444 C6.306,0.699444444 6.219,0.765444444 6.048,0.765444444 L6.048,0.765444444 L5.402,0.792444444 C4.848,0.815444444 4.571,0.981444444 4.571,1.28844444 C4.571,1.43144444 4.629,1.66444444 4.758,1.97644444 C5.998,4.99844444 10.281,14.0294444 10.281,14.0294444 L10.281,14.0294444 L10.438,14.0704444 L13.1988388,8.56383302 C12.861268,7.81805963 12.646,7.34044444 12.646,7.34044444 L10.748,3.61044444 C10.748,3.61044444 10.381,2.86444444 10.256,2.61644444 C9.422,0.964444444 9.44,0.876444444 8.597,0.764444444 C8.361,0.733444444 8.239,0.703444444 8.239,0.586444444 L8.239,0.0634444444 L8.31,0.0124444444 L8.63792296,0.0120705185 C10.2698044,0.0104444444 13.222,0.0104444444 13.222,0.0104444444 L13.352,0.0534444444 L13.352,0.574444444 C13.352,0.693444444 13.267,0.754444444 13.094,0.754444444 L12.738,0.805444444 C11.838,0.875444444 11.985,1.24344444 12.583,2.43444444 L14.404,6.159 L16.418,2.14244444 C16.7309286,1.45994444 16.6937857,1.25254138 16.5755918,1.090283 L16.547,1.05344444 C16.467,0.958444444 16.199,0.804444444 15.616,0.781444444 L15.616,0.781444444 L15.387,0.756444444 C15.329,0.756444444 15.275,0.736444444 15.222,0.697444444 C15.17,0.660444444 15.144,0.612444444 15.144,0.551444444 L15.144,0.551444444 L15.144,0.0554444444 Z M110.358,0.119444444 C110.72,0.119444444 110.851,0.380444444 111.058,0.900444444 L116.388,14.9924444 C116.753,16.0074444 117.274,16.3964444 118.314,16.5004444 L118.599,16.5254444 C118.73,16.5254444 118.86,16.6024444 118.86,16.7344444 L118.86,17.2264444 L118.782,17.2794444 C118.782,17.2794444 116.950302,17.230953 115.902743,17.2267363 L115.765,17.2264444 C114.855,17.2264444 112.306,17.2794444 112.306,17.2794444 L112.282,17.2264444 L112.282,16.7344444 C112.282,16.6024444 112.334,16.5254444 112.467,16.5254444 L113.195,16.4724444 C114.182,16.3954444 114.548,16.0814444 114.287,15.3554444 L112.701,10.9594444 L107.291,10.9594444 C106.667,10.9594444 106.511,11.0634444 106.382,11.3994444 L104.873,15.1704444 C104.613,15.8244444 104.951,16.3974444 105.913,16.4754444 L106.667,16.5284444 C106.771,16.5284444 106.875,16.6064444 106.875,16.7354444 L106.875,17.2294444 L106.823,17.2824444 C106.823,17.2824444 104.211186,17.2335996 103.450165,17.2296921 L103.365,17.2294444 C102.688,17.2294444 101.024,17.2824444 101.024,17.2824444 L100.971,17.2294444 L100.971,16.7354444 C100.971,16.6064444 101.049,16.5284444 101.18,16.5284444 C102.325,16.4504444 102.973,16.2414444 103.701,14.5774444 L109.472,1.05644444 C109.757,0.380444444 109.966,0.119444444 110.358,0.119444444 Z M96.847926,5.2671319 L96.965,5.26744444 C97.666,5.26744444 99.67,5.21544444 99.67,5.21544444 L99.694,5.26744444 L99.694,5.83944444 C99.694,5.91744444 99.64,5.96944444 99.538,5.96944444 L98.992,6.02244444 C98.185,6.09944444 97.9,6.30844444 97.9,6.82944444 L97.903,15.4874444 C97.903,16.0594444 98.163,16.3974444 98.995,16.4754444 L99.541,16.5284444 C99.619,16.5284444 99.697,16.5794444 99.697,16.6834444 L99.697,17.2294444 L99.671,17.2824444 C99.671,17.2824444 97.8705537,17.2341531 97.0067354,17.229763 L96.89,17.2294444 C96.161,17.2294444 94.134,17.2824444 94.134,17.2824444 L94.081,17.2294444 L94.081,16.6834444 C94.081,16.5794444 94.159,16.5284444 94.263,16.5284444 L94.784,16.4754444 C95.641,16.3974444 95.902,15.9814444 95.902,15.4874444 L95.902,6.82944444 C95.902,6.25944444 95.589,6.10044444 94.784,6.02444444 L94.263,5.97044444 C94.159,5.97044444 94.081,5.94644444 94.081,5.86644444 L94.081,5.26744444 L94.107,5.21544444 C94.107,5.21544444 95.9785165,5.26282461 96.847926,5.2671319 Z M50.2196655,5.2671319 L50.337,5.26744444 C51.039,5.26744444 53.041,5.21544444 53.041,5.21544444 L53.067,5.26744444 L53.067,5.83944444 C53.067,5.91744444 53.015,5.96944444 52.911,5.96944444 L52.365,6.02244444 C51.559,6.09944444 51.273,6.30844444 51.273,6.82944444 L51.273,15.4874444 C51.273,16.0594444 51.533,16.3974444 52.365,16.4754444 L52.911,16.5284444 C52.989,16.5284444 53.067,16.5794444 53.067,16.6834444 L53.067,17.2294444 L53.041,17.2824444 C53.041,17.2824444 51.2405537,17.2341531 50.3758657,17.229763 L50.259,17.2294444 C49.531,17.2294444 47.503,17.2824444 47.503,17.2824444 L47.451,17.2294444 L47.451,16.6834444 C47.451,16.5794444 47.529,16.5284444 47.633,16.5284444 L48.153,16.4754444 C49.011,16.3974444 49.271,15.9814444 49.271,15.4874444 L49.271,6.82944444 C49.271,6.25944444 48.959,6.10044444 48.153,6.02444444 L47.633,5.97044444 C47.529,5.97044444 47.451,5.94644444 47.451,5.86644444 L47.451,5.26744444 L47.477,5.21544444 C47.477,5.21544444 49.3485165,5.26282461 50.2196655,5.2671319 Z M28.5296655,5.2671319 L28.647,5.26744444 C29.349,5.26744444 31.351,5.21544444 31.351,5.21544444 L31.377,5.26744444 L31.377,5.83944444 C31.377,5.91744444 31.325,5.96944444 31.221,5.96944444 L30.675,6.02244444 C29.869,6.09944444 29.583,6.30844444 29.583,6.82944444 L29.583,15.4874444 C29.583,16.0594444 29.843,16.3974444 30.675,16.4754444 L31.221,16.5284444 C31.299,16.5284444 31.377,16.5794444 31.377,16.6834444 L31.377,17.2294444 L31.351,17.2824444 C31.351,17.2824444 29.5505537,17.2341531 28.6858657,17.229763 L28.569,17.2294444 C27.841,17.2294444 25.813,17.2824444 25.813,17.2824444 L25.761,17.2294444 L25.761,16.6834444 C25.761,16.5794444 25.839,16.5284444 25.943,16.5284444 L26.463,16.4754444 C27.321,16.3974444 27.581,15.9814444 27.581,15.4874444 L27.581,6.82944444 C27.581,6.25944444 27.268,6.10044444 26.463,6.02444444 L25.943,5.97044444 C25.839,5.97044444 25.761,5.94644444 25.761,5.86644444 L25.761,5.26744444 L25.787,5.21544444 C25.787,5.21544444 27.6585165,5.26282461 28.5296655,5.2671319 Z M69.5732145,5.2671319 L73.509,5.26744444 C74.289,5.26744444 76.136,5.21544444 76.136,5.21544444 L76.19,5.26744444 C76.214,6.38544444 76.396,7.40144444 76.58,8.38844444 L75.932,8.49244444 C75.647,7.52944444 75.153,6.15244444 73.489,6.15244444 L71.409,6.15244444 C70.915,6.15244444 70.655,6.33444444 70.655,6.77544444 L70.655,10.5464444 L72.604,10.5464444 C73.333,10.5464444 73.514,10.2344444 73.619,9.71444444 L73.774,9.16844444 C73.774,9.09044444 73.827,9.03744444 73.93,9.03744444 L74.37,9.03744444 C74.424,9.03744444 74.424,9.06444444 74.424,9.11544444 C74.37,9.68644444 74.268,10.4164444 74.268,11.0404444 C74.268,11.6894444 74.372,12.2364444 74.424,12.8344444 L74.37,12.8874444 L73.93,12.8874444 C73.801,12.8874444 73.746,12.8344444 73.746,12.7564444 L73.616,12.1854444 C73.512,11.6644444 73.278,11.3784444 72.599,11.3784444 L70.651,11.3784444 L70.651,15.3574444 C70.651,15.8494444 70.934,16.3434444 71.405,16.3434444 L73.875,16.3434444 C75.201,16.3434444 75.931,15.5114444 76.241,14.1574444 L76.889,14.2354444 L76.368,17.2244444 L76.316,17.2764444 C76.316,17.2764444 74.782,17.2244444 74.002,17.2244444 L69.453,17.2294444 C68.673,17.2294444 66.88,17.2824444 66.88,17.2824444 L66.853,17.2294444 L66.853,16.6574444 C66.853,16.6064444 66.88,16.5284444 67.009,16.5284444 L67.609,16.4754444 C68.416,16.3974444 68.65,15.8774444 68.65,15.3584444 L68.65,6.77844444 C68.65,6.17844444 68.338,6.07544444 67.609,6.02444444 L67.009,5.97044444 C66.853,5.94644444 66.853,5.89344444 66.853,5.86644444 L66.853,5.26744444 L66.88,5.21544444 C66.88,5.21544444 68.7269153,5.26282461 69.5732145,5.2671319 Z M36.2856339,5.2671581 L36.398,5.26744444 C37.127,5.26744444 38.764,5.21544444 38.764,5.21544444 L38.79,5.26744444 L38.79,5.83944444 C38.79,5.91744444 38.738,5.94344444 38.634,5.96944444 L38.348,6.02244444 C37.542,6.17744444 37.256,6.30844444 37.256,6.82944444 L37.256,10.7564444 C38.114,10.7564444 38.608,10.3164444 39.752,9.09244444 C40.792,7.94644444 41.598,6.98844444 41.598,6.49144444 C41.598,6.28244444 41.364,6.05044444 40.844,5.97044444 C40.74,5.94644444 40.688,5.91844444 40.688,5.84044444 L40.688,5.24044444 L40.714,5.21644444 C40.714,5.21644444 42.82,5.26844444 43.574,5.26844444 C44.25,5.26844444 45.394,5.21644444 45.394,5.21644444 L45.472,5.24044444 L45.472,5.84044444 C45.472,5.91844444 45.394,5.97044444 45.264,5.97044444 C44.25,6.04844444 43.548,6.10044444 42.612,7.16644444 L40.376,9.73844444 C39.934,10.2084444 39.778,10.4924444 39.778,10.7014444 C39.778,10.8574444 39.882,10.9864444 40.012,11.1424444 L43.938,15.8744444 C44.25,16.2374444 44.874,16.3944444 45.394,16.4974444 L45.524,16.5224444 C45.602,16.5474444 45.706,16.5994444 45.706,16.6774444 L45.706,17.2234444 L45.628,17.2494444 C45.628,17.2494444 44.4073495,17.2264133 43.6568052,17.2237038 L43.522,17.2234444 C42.872,17.2234444 41.936,17.2494444 41.936,17.2494444 L41.91,17.2234444 L41.91,16.9114444 C41.91,16.5724444 41.884,16.2884444 41.52,15.8724444 L38.634,12.2834444 C38.244,11.7624444 37.828,11.6344444 37.256,11.6344444 L37.256,15.4874444 C37.256,16.0594444 37.594,16.3454444 38.348,16.4754444 L38.634,16.5284444 C38.712,16.5534444 38.79,16.5794444 38.79,16.6834444 L38.79,17.2294444 L38.764,17.2824444 C38.764,17.2824444 37.2938837,17.2348766 36.4759242,17.2298694 L36.346,17.2294444 C35.618,17.2294444 33.486,17.2824444 33.486,17.2824444 L33.434,17.2294444 L33.434,16.6834444 C33.434,16.5794444 33.512,16.5284444 33.616,16.5284444 L34.136,16.4754444 C34.916,16.3974444 35.254,15.9814444 35.254,15.4874444 L35.254,6.82944444 C35.254,6.25944444 34.968,6.10044444 34.136,6.02444444 L33.616,5.97044444 C33.512,5.97044444 33.434,5.94644444 33.434,5.86644444 L33.434,5.26744444 L33.46,5.21544444 C33.46,5.21544444 35.4106389,5.263021 36.2856339,5.2671581 Z M60.609,5.21644444 C64.299,5.21644444 64.975,7.03544444 64.975,8.38944444 C64.975,9.95044444 64.221,12.3934444 60.531,12.3934444 C59.881,12.3934444 59.361,12.3404444 58.892,12.1334444 L58.892,15.6154444 C58.892,16.1864444 59.204,16.3184444 60.037,16.4474444 L60.558,16.5254444 C60.662,16.5504444 60.741,16.5784444 60.741,16.6804444 L60.741,17.2264444 L60.717,17.2794444 C60.717,17.2794444 58.8208822,17.2311531 57.9474968,17.226763 L57.83,17.2264444 C57.102,17.2264444 55.152,17.2794444 55.152,17.2794444 L55.126,17.2264444 L55.126,16.6804444 C55.126,16.5764444 55.178,16.5504444 55.282,16.5254444 L55.828,16.4474444 C56.634,16.3434444 56.894,16.1094444 56.894,15.6154444 L56.891,6.88044444 C56.891,6.07444444 56.553,6.04844444 55.331,5.97044444 C55.175,5.97044444 55.149,5.89344444 55.149,5.84044444 L55.149,5.24244444 L55.201,5.21644444 C55.591,5.21644444 57.125,5.26844444 57.879,5.26844444 C58.607,5.26844444 59.647,5.21644444 60.609,5.21644444 Z M81.858,5.26844444 C82.35,5.26844444 84.614,5.21644444 85.29,5.21644444 C89.632,5.21644444 91.765,7.92044444 91.765,11.3784444 C91.765,15.9294444 88.54,17.2794444 85.656,17.2794444 C83.6854737,17.2794444 82.765928,17.2318766 81.9892748,17.2268694 L81.861,17.2264444 C81.08,17.2264444 79.103,17.2794444 79.103,17.2794444 L79.078,17.2264444 L79.078,16.6804444 C79.075,16.6064444 79.128,16.5284444 79.231,16.5284444 L79.829,16.4754444 C80.61,16.3974444 80.87,16.1634444 80.87,15.3584444 L80.87,6.77844444 C80.87,6.10044444 80.686,6.10044444 79.829,6.02444444 L79.259,5.97044444 C79.155,5.97044444 79.075,5.91844444 79.075,5.84044444 L79.075,5.26844444 L79.1,5.21644444 C79.1,5.21644444 81.389,5.26844444 81.858,5.26844444 Z M84.536,5.97044444 C83.522,5.97044444 82.872,6.12644444 82.872,6.77844444 L82.872,15.3584444 C82.872,16.0844444 83.053,16.5284444 85.03,16.5284444 C87.889,16.5284444 89.503,15.4644444 89.503,11.8214444 C89.503,9.11844444 88.904,5.97044444 84.536,5.97044444 Z M60.453,5.97144444 C59.204,5.97144444 58.892,6.20544444 58.892,6.88144444 L58.893,11.4054444 C59.413,11.6144444 60.063,11.6394444 60.583,11.6394444 C62.144,11.6394444 62.895,10.7014444 62.895,8.70144444 C62.895,6.46544444 61.881,5.97144444 60.453,5.97144444 Z M109.761,2.92844444 L109.709,2.92844444 L107.109,9.53244444 C107.005,9.79444444 107.186,9.87044444 107.758,9.87044444 L112.283,9.87044444 L112.283,9.86944444 L109.761,2.92844444 Z"/>
		</g>
	</g>
</svg>

------MultipartBoundary--5B6ObY9ywu1QufI7z7Jlp6bU4BW5i86iha0uDFOS2z------
